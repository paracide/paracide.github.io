<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[沙塔斯光辉]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://paracide.github.io/"/>
  <updated>2016-12-04T15:49:12.517Z</updated>
  <id>http://paracide.github.io/</id>
  
  <author>
    <name><![CDATA[Paracide]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[MyBatis一对多查询中存在相同的外键]]></title>
    <link href="http://paracide.github.io/2016/12/04/MyBatis/"/>
    <id>http://paracide.github.io/2016/12/04/MyBatis/</id>
    <published>2016-12-04T09:35:07.000Z</published>
    <updated>2016-12-04T15:49:12.517Z</updated>
    <content type="html"><![CDATA[<h2 id="u9700_u6C42"><a href="#u9700_u6C42" class="headerlink" title="需求"></a>需求</h2><ul>
<li>2张表<ul>
<li>Airport表</li>
<li>Flight表<ul>
<li>存在起飞机场 take_airport和降落机场landing_airport2个外键</li>
<li>都指向Airport表的ap_id</li>
<li>都指向Airport表的ap_id</li>
</ul>
</li>
<li>根据<code>take_airport</code>和<code>landing_airport</code>查出所有的Flihgt</li>
</ul>
</li>
</ul>
<ul>
<li>Airport.class</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同时可以作为take_airport和landing_airport的机场类</span></span><br><span class="line"><span class="keyword">public</span> class Airport &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Integer</span> ap_id;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> airport_Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> city_name;</span><br><span class="line">    <span class="attribute">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Flight.class</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Flight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer fs_id;</span><br><span class="line">    <span class="keyword">private</span> Airport take_airport;</span><br><span class="line">    <span class="keyword">private</span> Airport landing_airport;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u5B9E_u73B0"><a href="#u5B9E_u73B0" class="headerlink" title="实现"></a>实现</h2><ul>
<li>mapper.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--flights的ResultMap,将查询的最终结果放到这里,包括2个Airport对象--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">resultMap</span> <span class="attribute">id</span>=<span class="value">"flights"</span> <span class="attribute">type</span>=<span class="value">"po.Flight"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">id</span> <span class="attribute">column</span>=<span class="value">"fs_id"</span> <span class="attribute">property</span>=<span class="value">"fs_id"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span><br><span class="line">            2个asscociation分别对应take_airport和landing_airport对象</span><br><span class="line">            分别调用id为getAirport的方法</span><br><span class="line">			根据ap_id将关联的Airport表中的数据存入到airports这个ResultMap中</span><br><span class="line">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">association</span> <span class="attribute">property</span>=<span class="value">"take_airport"</span> </span><br><span class="line">		<span class="attribute">column</span>=<span class="value">"take_airport_ID"</span> <span class="attribute">select</span>=<span class="value">"getAirport"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">association</span> <span class="attribute">property</span>=<span class="value">"landing_airport"</span> </span><br><span class="line">		<span class="attribute">column</span>=<span class="value">"landing_airport_id"</span> <span class="attribute">select</span>=<span class="value">"getAirport"</span>/&gt;</span></span><br><span class="line">		</span><br><span class="line"> <span class="tag">&lt;/<span class="title">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--关联查询中Airport的ResultMap,airports  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">resultMap</span> <span class="attribute">id</span>=<span class="value">"airports"</span> <span class="attribute">type</span>=<span class="value">"po.Airport"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"ap_id"</span> <span class="attribute">column</span>=<span class="value">"ap_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"airport_nName"</span> <span class="attribute">column</span>=<span class="value">"airport_nName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"city_name"</span> <span class="attribute">column</span>=<span class="value">"city_name"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dao层getAllFlight方法对应的SQL语句</span><br><span class="line">根据放入的2个airport对象的ap_id查询所有的flight --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"getAllFlight"</span> <span class="attribute">resultMap</span>=<span class="value">"flights"</span>&gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM FLIGHTS</span><br><span class="line">    WHERE TAKE_AIRPORT_ID = #&#123;take_airport.ap_id&#125; AND</span><br><span class="line">    LANDING_AIRPORT_ID = #&#123;landing_airport.ap_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2个association中select属性调用的方法</span><br><span class="line">根据ap_id查询关联的Airport表中的所有数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"getAirport"</span> <span class="attribute">resultType</span>=<span class="value">"po.Airport"</span>&gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM AIRPORTS</span><br><span class="line">    WHERE AP_ID = #&#123;ap_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9700_u6C42"><a href="#u9700_u6C42" class="headerlink" title="需求"></a>需求</h2><ul>
<li>2张表<ul>
<li>Airport表</li>
<li>Flight表<ul>
<li>]]>
    </summary>
    
      <category term="MyBatis" scheme="http://paracide.github.io/tags/MyBatis/"/>
    
      <category term="MyBatis" scheme="http://paracide.github.io/categories/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Thinking In JAVA》笔记 9:接口]]></title>
    <link href="http://paracide.github.io/2016/09/04/thinginjava9/"/>
    <id>http://paracide.github.io/2016/09/04/thinginjava9/</id>
    <published>2016-09-04T15:51:35.000Z</published>
    <updated>2016-11-13T06:05:35.171Z</updated>
    <content type="html"><![CDATA[<p>在第8章&quot;乐器&quot;例子中,基类Instrument中的方法往往是&quot;哑&quot;方法(方法体没什么实际意义),若要调用这些方法,就会出现一些错误.<br>这是因为Instrument类的目的是为它的所有导出类创建一个通用接口,而不需要直接调用这个通用接口</p>
<h2 id="u62BD_u8C61_u7C7B_u4E0E_u62BD_u8C61_u65B9_u6CD5"><a href="#u62BD_u8C61_u7C7B_u4E0E_u62BD_u8C61_u65B9_u6CD5" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h2><ul>
<li>建立这个通用接口的唯一理由是:<ul>
<li>不同的子类可以用不同的方式表示该接口</li>
<li>通用接口建立起一种基本形式,以此表示所有导出类的共同部分</li>
</ul>
</li>
<li>因此创建一个Instrument类并没有什么用,Java还阻止使用者这么做</li>
</ul>
<h2 id="u63A5_u53E3"><a href="#u63A5_u53E3" class="headerlink" title="接口"></a>接口</h2><blockquote>
<p>一个接口:所有实现了该特定接口的类看起来都像这样.<br>  任何使用了某特定接口的代码都知道可以调用该接口的哪些方法,而且仅且需要这些.</p>
</blockquote>
<ul>
<li>接口的域默认static final</li>
</ul>
<h2 id="u5B8C_u5168_u89E3_u8026"><a href="#u5B8C_u5168_u89E3_u8026" class="headerlink" title="完全解耦"></a>完全解耦</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">C</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">C</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>只要<code>play()</code>是通过类<code>class C</code>调用而非接口<code>interface C</code>,那么你只能使用<code>c</code>和<code>c</code>的子类</p>
</li>
<li><p>如果<code>play()</code>调用不是通过这个类或者子类,那么就会报错</p>
</li>
<li><p>如果通过一个接口,那么就会放宽限制</p>
<ul>
<li>一类如果已经继承了别的类,你却无法改变它的继承对象,这样会造成很大的麻烦</li>
<li>然而让它实现一个接口,却很简单</li>
</ul>
</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apply</span> </span>&#123;</span><br><span class="line">    public <span class="literal">static</span> <span class="keyword">void</span> process(Processor p, <span class="built_in">Object</span> s) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Using Processor "</span> + p.name());</span><br><span class="line">        <span class="built_in">print</span>(p.process(s));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="built_in">String</span> name();</span><br><span class="line">    <span class="built_in">Object</span> process(<span class="built_in">Object</span> input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Filter</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span>(<span class="params">Waveform input</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HighPass</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Filter</span> &#123;</span></span><br><span class="line">    double cutoff;</span><br><span class="line">    public <span class="type">HighPass</span>(double cutoff) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cutoff = cutoff;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    public <span class="type">Waveform</span> process(<span class="type">Waveform</span> input) &#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LowPass</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Filter</span> &#123;</span></span><br><span class="line">    double cutoff;</span><br><span class="line">    public <span class="type">LowPass</span>(double cutoff) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cutoff = cutoff;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    public <span class="type">Waveform</span> process(<span class="type">Waveform</span> input) &#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>现在有个Apply类,想调用它的process方法,调用者是继承自Filter的2个子类LowPass HighPass</li>
<li>process只接受 Processor,而LowPass HighPass已经继承了Filter<ul>
<li>Processor是个类,那么process()和Processor耦合过紧,Filter子类无法复用process()</li>
<li>Processor是个接口,那么让Filter的子类实现接口就可以复用process()<ul>
<li>现在Filter是一个发现的类,而不是创建的类===&gt;无法让Filter子类实现接口</li>
<li>构建一个FilterAdpater适配器,实现了processor,接受Filter类</li>
<li>FilterAdpater使用了代理</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="u9002_u914D_u5668_u6A21_u5F0F"><a href="#u9002_u914D_u5668_u6A21_u5F0F" class="headerlink" title="适配器模式"></a>适配器模式</h3><blockquote>
<p>适配器模式:让接口不同的对象一起工作</p>
</blockquote>
<ul>
<li>适配器实现了目标接口,让它作为一个Processor可以被Apply.process(Processor processor)接受</li>
<li>同时代理了Filter,得到了Filter子类的具体方法<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterAdpater</span> <span class="keyword">implements</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    Filter filter;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilterAdpater</span><span class="params">(Filter filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filter = filter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> filter.<span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filter.process((Waveform) input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> FilterProcessor &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        Waveform w = <span class="keyword">new</span> Waveform();</span><br><span class="line">        Apply.process(<span class="keyword">new</span> FilterAdpater(<span class="keyword">new</span> LowPass(<span class="number">1</span>)), w);</span><br><span class="line">        Apply.process(<span class="keyword">new</span> FilterAdpater(<span class="keyword">new</span> HighPass(<span class="number">2</span>)), w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waveform</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Waveform "</span> + counter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>让方法接受接口类型,是一种让任何类都可以对该方法适配的方式,这就是使用接口而不是类的强大</strong></p>
<h2 id="Java_u4E2D_u7684_u591A_u91CD_u7EE7_u627F"><a href="#Java_u4E2D_u7684_u591A_u91CD_u7EE7_u627F" class="headerlink" title="Java中的多重继承"></a>Java中的多重继承</h2><ul>
<li>使用接口的核心原因:为了能够向上转型为多个基类(以及由此带来的灵活性)</li>
<li>防止客户端程序员创建该类的对象<ul>
<li>一方面创建这样接口的对象是没有必要的,因为方法不完整</li>
<li>另一方法,方法在运行时会报错,于是在编译时禁止创建对象</li>
</ul>
</li>
</ul>
<h2 id="u63A5_u53E3_u4E0E_u5DE5_u5382"><a href="#u63A5_u53E3_u4E0E_u5DE5_u5382" class="headerlink" title="接口与工厂"></a>接口与工厂</h2><ul>
<li>工厂对象上调用的是创建方法,而该工厂对象将生成接口的某个实现的对象</li>
<li>我们的代码将完全的与接口的实现分离,这就使得我们可以透明的将某个实现替代为另外一个实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//游戏接口,</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">Move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工厂接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Game <span class="title">getGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line">通过工厂来创建具体的Game实现,</span><br><span class="line">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverWatchFactory</span> <span class="keyword">implements</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Game <span class="title">getGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Game() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> moves = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVES = <span class="number">3</span>;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"OverWatch move "</span> + moves);</span><br><span class="line">                <span class="keyword">return</span> ++moves != MOVES;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WarcraftFactory</span> <span class="keyword">implements</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Game <span class="title">getGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Game() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> moves = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVES = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ++moves != MOVES;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        playGame(<span class="keyword">new</span> OverWatchFactory());</span><br><span class="line">        playGame(<span class="keyword">new</span> WarcraftFactory());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里我们可以不管工厂具体类型,创建出具体的Game实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(GameFactory factory)</span> </span>&#123;</span><br><span class="line">        Game game = factory.getGame();</span><br><span class="line">        <span class="keyword">while</span> (game.Move());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>在第8章&quot;乐器&quot;例子中,基类Instrument中的方法往往是&quot;哑&quot;方法(方法体没什么实际意义),若要调用这些方法,就会出现一些错误.<br>这是因为Instrument类的目的是为它的所有导出类创建一个通用接口,而不需要直接调用这个]]>
    </summary>
    
      <category term="Java" scheme="http://paracide.github.io/tags/Java/"/>
    
      <category term="接口" scheme="http://paracide.github.io/tags/%E6%8E%A5%E5%8F%A3/"/>
    
      <category term="Java" scheme="http://paracide.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Thinking In JAVA》笔记 8:多态]]></title>
    <link href="http://paracide.github.io/2016/09/02/thinginjava8/"/>
    <id>http://paracide.github.io/2016/09/02/thinginjava8/</id>
    <published>2016-09-02T15:51:35.000Z</published>
    <updated>2016-09-16T08:05:52.343Z</updated>
    <content type="html"><![CDATA[<h2 id="u8F6C_u673A"><a href="#u8F6C_u673A" class="headerlink" title="转机"></a>转机</h2><h3 id="u65B9_u6CD5_u7ED1_u5B9A_u8C03_u7528"><a href="#u65B9_u6CD5_u7ED1_u5B9A_u8C03_u7528" class="headerlink" title="方法绑定调用"></a>方法绑定调用</h3><blockquote>
<p>将一个方法调用同一个方法体关联起来被称作绑定</p>
</blockquote>
<h4 id="u524D_u671F_u7ED1_u5B9A"><a href="#u524D_u671F_u7ED1_u5B9A" class="headerlink" title="前期绑定"></a>前期绑定</h4><blockquote>
<p>若在程序执行前进行绑定</p>
</blockquote>
<ul>
<li><p>在面向过程的语言中默认前期绑定</p>
<h4 id="u540E_u671F_u7ED1_u5B9A"><a href="#u540E_u671F_u7ED1_u5B9A" class="headerlink" title="后期绑定"></a>后期绑定</h4><blockquote>
<p>运行时根据对象的类型进行绑定,也称为动态绑定</p>
</blockquote>
</li>
<li><p>编译器一直不知道对象的类型,所以必须具备某种机制,以便在运行时判断对象的类型,调用恰当的方法</p>
</li>
<li>Java中除了static final(private方法也属于final方法)之外,其他所有的方法都是后期绑定</li>
<li>虽然final可以关闭方法的动态绑定,让编译器为final方法调用生成更有效的代码,然而并没有什么用</li>
</ul>
<h3 id="u4EA7_u751F_u6B63_u786E_u7684_u65B9_u6CD5_28_u53D1_u751F_u5728_u5411_u4E0A_u8F6C_u578B_u4E4B_u540E_29"><a href="#u4EA7_u751F_u6B63_u786E_u7684_u65B9_u6CD5_28_u53D1_u751F_u5728_u5411_u4E0A_u8F6C_u578B_u4E4B_u540E_29" class="headerlink" title="产生正确的方法(发生在向上转型之后)"></a>产生正确的方法(发生在向上转型之后)</h3><blockquote>
<p>知道Java中方法都是动态绑定后,我们可以编写只与基类打交道的代码,并且让这些代码对所有的导出类同样有效<br>换一种说法,发送消息给某个对象,让对象去判断应该做什么</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Music</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tune</span><span class="params">(Instrument i)</span></span>&#123;</span><br><span class="line">        i.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wind</span> <span class="keyword">extends</span>  <span class="title">Instrument</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"wind.play()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stringed</span> <span class="keyword">extends</span> <span class="title">Instrument</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Stringed.play()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Music类的<code>tune(Instrument i){i.play()}</code>中,Wind wind向上转型为Instrument类型,然而编译器并不知道wind究竟是Instrument类型还是Wind类型,同时由于动态绑定的存在,编译阶段并没有将<code>play()</code>调用与Instrument类的<code>play()</code>的方法体绑定</p>
<ul>
<li>或许直接写<code>tune(Wind wind)</code>会更加直观,但这样当有很多子类时,就会需要大量的重载方法:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tune</span><span class="params">(Wind i)</span></span>&#123;</span><br><span class="line">    i.play();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tune</span><span class="params">(Brass i)</span></span>&#123;</span><br><span class="line">    i.play();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tune</span><span class="params">(Stringed i)</span></span>&#123;</span><br><span class="line">    i.play();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>直到运行时编译器(我们无需关注编译器怎么断定的)判断了wind的具体类型,将wind所在的<code>tune()</code>调用与Wind类中的<code>tune()</code>的方法体进行绑定</p>
</li>
<li><code>tune(Instrument i)</code> 这样一个简单的代码代替了以上繁琐的代码,也就是说我们不管导出类,只写与导出类打交道的代码.而参数类型的判断我们无需关注,对象会自己断定</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RandomShapeGenerator generator = <span class="keyword">new</span> RandomShapeGenerator();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        Shape[] shapes = <span class="keyword">new</span> Shape[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shapes.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            shapes[i] = generator.next();</span><br><span class="line">        &#125;</span><br><span class="line">        shapes[<span class="number">9</span>] = <span class="keyword">new</span> Shape();</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : shapes) &#123;</span><br><span class="line">            shape.draw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">keep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"I am keep"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"Shape"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"circle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.erase();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">keep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"You are keep"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"Square"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.erase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"Triangle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.erase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomShapeGenerator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Random rand = <span class="keyword">new</span> Random(<span class="number">666</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//rand.nextInt(3)是0~3</span></span><br><span class="line">        <span class="keyword">switch</span> (rand.nextInt(<span class="number">3</span>)) &#123;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">/**</span><br><span class="line">            return 取得对象的引用,并以Shape类型返回</span><br><span class="line">            */</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Triangle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>RandomShapeGenerator是一个工厂,每次调用<code>next()</code>时,可以为随机选择的Shaple类子类们的对象产生一个Shape引用(这是由返回值 Shape 决定的)</li>
<li>这里的向上转型是发生在return语句的,return语句取得了一个<strong>指向某个Circle,Square或者Triangle的引用</strong>,并以Shape类型从<code>next()</code>方法中发送出去</li>
<li><code>main()</code>方法中有个存放Shape类型的数组,并通过RandomShapeGenerator往里面填充Shape,<code>main()</code>虽然知道自己拥有很多Shape引用,但不知道引用所指向的对象的具体类型.但在遍历数组调用各个元素的<code>draw()</code>方法,却会准备的调用各自类型对应的方法.对draw()方法所有的调用都是动态绑定的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dodo</span><span class="params">(Cycle cycle)</span> </span>&#123;</span><br><span class="line">        cycle.ride();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        dodo(<span class="keyword">new</span> Unicycle());</span><br><span class="line">        dodo(<span class="keyword">new</span> Bicycle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wheel = -<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ride</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"this is cycle"</span>);</span><br><span class="line">        wheels();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"轮子"</span> + wheel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unicycle</span> <span class="keyword">extends</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wheel = <span class="number">0</span>;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ride</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"this is Unicycle"</span>);</span><br><span class="line">        wheels();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"lunzi"</span> + wheel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">extends</span> <span class="title">Cycle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wheel = <span class="number">3</span>;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ride</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"this is Bicycle"</span>);</span><br><span class="line">        wheels();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"lunzi"</span> + wheel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">/*output</span><br><span class="line">this is Unicycle</span><br><span class="line">lunzi0</span><br><span class="line">this is Bicycle</span><br><span class="line">lunzi3 */</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>main()</code>中调用<code>dodo(new Unicycle())</code>,编译器判断是Unicycle类型,调用Unicycle自己的<code>ride()</code>方法</li>
<li>此时也因为已经判断了是Unicycle类型,内部方法<code>wheel()</code>直接调用Unicycle的<code>wheel()</code></li>
<li><code>ride()</code>不同于<code>wheel()</code>,由于使用了多态,<code>ride()</code>必然是父类中也存在的方法</li>
<li>而<code>wheel()</code>是<code>ride()</code>的内部方法,可能继承自父类,也可能是自己独有的,然而似乎并没有什么用:如果<code>wheel()</code>是独有但你找不到,那肯定报错.如果是继承来的,子类有则调用子类的,否则父类的</li>
</ul>
<h3 id="u53EF_u6269_u5C55_u6027"><a href="#u53EF_u6269_u5C55_u6027" class="headerlink" title="可扩展性"></a>可扩展性</h3><blockquote>
<p>在一个设计良好的OOP程序中,大多数或者所有方法都会遵循tune()的模型,而且只与基类接口通信,这样的程序是可以扩展的.因为可以从通用的基类继承出新的数据类型,从而新添一些功能.那些操纵基类接口的方法(就是使用多态的方法)不需要任何改动就可以应用与新类</p>
</blockquote>
<ul>
<li><p>我们创建了一个新类 <code>class WoodWind extends Instrument{}</code>并添加了一些新功能.</p>
<ul>
<li>如果使用多态,子类WoodWind不论怎么改动,都有<code>play()</code>可以被<code>tune(Instrument i){i.play()}</code>调用,而<code>tune()</code>并不需要怎么修改</li>
<li>如果不使用多态,我们需要新增一个<code>tune(WoodWind i){i.play()}</code>这样一个重载方法,但有时我们无法修改<code>tune()</code>所在的Music类即无法进行扩展</li>
</ul>
</li>
<li><p>tune()方法完全可以忽略周围代码所发生的所有变化,依旧正常运行,这正是我们期待多态所具有的特性</p>
</li>
<li>多态:将改变的事物与未变的事物分离</li>
</ul>
<h3 id="u7F3A_u9677_3A_u8986_u76D6_26quot_3B_u79C1_u6709_26quot_3B_u65B9_u6CD5"><a href="#u7F3A_u9677_3A_u8986_u76D6_26quot_3B_u79C1_u6709_26quot_3B_u65B9_u6CD5" class="headerlink" title="缺陷:覆盖&quot;私有&quot;方法"></a>缺陷:覆盖&quot;私有&quot;方法</h3><p>不使用<code>@Override</code>情况下,虽然可以在子类中复写父类的private方法且不报错,但并不按照我们的意愿那样进行.</p>
<h3 id="u7F3A_u9677_3A_u57DF_u4E0E_u9759_u6001_u65B9_u6CD5"><a href="#u7F3A_u9677_3A_u57DF_u4E0E_u9759_u6001_u65B9_u6CD5" class="headerlink" title="缺陷:域与静态方法"></a>缺陷:域与静态方法</h3><blockquote>
<p>如果某个方法是静态的,它的行为将不具备多态性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Base base =<span class="keyword">new</span> Dervied();</span><br><span class="line">        System.out.println(base.dynamicGet());</span><br><span class="line">        System.out.println(base.staticGet());<span class="comment">//虽然使用了多态,但并没有达到使用多态的效果(即调用子类的静态方法)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">staticGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Base staticGet"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dynamicGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Base dynamicGet"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dervied</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dynamicGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dervied dynamicGet"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">staticGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dervied staticGet"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">/*output</span><br><span class="line">   Dervied dynamicGet</span><br><span class="line">   Base staticGet</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>静态方法是与类<code>Base base</code>,而并非与单个对象<code>new Dervied()</code>相关联</li>
</ul>
<h2 id="u6784_u9020_u5668_u4E0E_u591A_u6001"><a href="#u6784_u9020_u5668_u4E0E_u591A_u6001" class="headerlink" title="构造器与多态"></a>构造器与多态</h2><ol>
<li>所有的成员变量(基类+导出类的)会先初始化为0</li>
<li>基类的构造方法执行前,基类的成员变量先初始化</li>
<li>基类的构造方法执行</li>
<li>子类的成员变量初始化</li>
<li><p>子类的构造方</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test15</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Kanon();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Air</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> iddqd = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Air</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"key()之前"</span>);</span><br><span class="line">        key();</span><br><span class="line">        print(<span class="string">"key()之后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">key</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"this is Air.key()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kanon</span> <span class="keyword">extends</span> <span class="title">Air</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> kuma = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Kanon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(iddqd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">key</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"this is Kanon.key()"</span> + iddqd);</span><br><span class="line">        print(<span class="string">"this is Kanon.key()"</span> + kuma);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span><br><span class="line">key()之前</span><br><span class="line">this is Kanon.key()1</span><br><span class="line">this is Kanon.key()0</span><br><span class="line">key()之后</span><br><span class="line">1 */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在调用基类的构造方法时,却调用了被覆盖的<code>key()</code>(子类的key())</p>
<ul>
<li>逻辑编写的没问题,编译器也未报错,但这不符合我们的意愿</li>
<li>在编写基类构造方法时,基类构造方法理论上应该用它自己的方法来完成初始化,而不是子类的</li>
<li>我们并未考虑过是否会有子类出现,也无法考虑这种情况</li>
</ul>
</li>
<li>编写构造器时有一条有效的准则:<code>用尽可能简单的方法使对象进入正常状态,如果可以的话,避免调用其他的方法</code><ul>
<li>在构造器中唯一能安全调用的就是基类中的final方法(private方法也属于final),他们无法被覆盖,因为也不会出现上述令人惊讶的结果</li>
<li>可能无法总是遵守这种准则,但应该朝着这方向努力</li>
</ul>
</li>
</ol>
<h2 id="u7528_u7EE7_u627F_u8FDB_u884C_u8BBE_u8BA1_28_u672A_u5B8C_u6210_29"><a href="#u7528_u7EE7_u627F_u8FDB_u884C_u8BBE_u8BA1_28_u672A_u5B8C_u6210_29" class="headerlink" title="用继承进行设计(未完成)"></a>用继承进行设计(未完成)</h2><blockquote>
<p>当我们使用现场的类来建立新类时,如果首先考虑继承技术,反倒会加重我们的负担,使事情变得不必要的麻烦起来<br>更好的方式是&quot;组合&quot;(状态模式)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transmogrift</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//继承+组合</span></span><br><span class="line">        Stage stage = <span class="keyword">new</span> Stage();</span><br><span class="line">        stage.performPlay();</span><br><span class="line">        stage.change();</span><br><span class="line">        stage.performPlay();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//继承</span></span><br><span class="line">        StageC stageC =<span class="keyword">new</span> StageC();</span><br><span class="line">        Actor actor =<span class="keyword">new</span> HappyActor();</span><br><span class="line">        stageC.performPlay(actor);</span><br><span class="line">        actor =<span class="keyword">new</span> SadActor();</span><br><span class="line">        stageC.performPlay(<span class="keyword">new</span> SadActor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 创建了2个Actor的子类,并都复写了act()方法,表达了方法间的差异</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HappyActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HappyActor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SadActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">act</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SadActor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Stage对象包含一个对Actor 的引用</span><br><span class="line"> * Actor被初始化为HappyActor对象,这意味着perfomPlay()会产生特殊的行为(动态绑定,执行HappyActor.act()的方法体)</span><br><span class="line"> * 同时actor引用在运行时通过change()可以与另外个Actor的子类对象进行绑定,perform()执行方法体也随着改变</span><br><span class="line"> * 这样,我们在运行期间获得了动态灵活性</span><br><span class="line"> * 也就是说 Stage运用组合使自己的状态改变,从而选择不同的方法</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Actor actor = <span class="keyword">new</span> HappyActor();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor = <span class="keyword">new</span> SadActor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actor.act();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StageC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performPlay</span><span class="params">(Actor actor)</span> </span>&#123;</span><br><span class="line">        actor.act();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u8F6C_u673A"><a href="#u8F6C_u673A" class="headerlink" title="转机"></a>转机</h2><h3 id="u65B9_u6CD5_u7ED1_u5B9A_u8C03_u7528"><a href="#]]>
    </summary>
    
      <category term="Java" scheme="http://paracide.github.io/tags/Java/"/>
    
      <category term="多态" scheme="http://paracide.github.io/tags/%E5%A4%9A%E6%80%81/"/>
    
      <category term="Java" scheme="http://paracide.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Thinking In JAVA》笔记 7:复用类]]></title>
    <link href="http://paracide.github.io/2016/08/31/thinginjava7/"/>
    <id>http://paracide.github.io/2016/08/31/thinginjava7/</id>
    <published>2016-08-31T15:51:35.000Z</published>
    <updated>2016-09-16T08:05:47.545Z</updated>
    <content type="html"><![CDATA[<h2 id="u4EE3_u7406"><a href="#u4EE3_u7406" class="headerlink" title="代理"></a>代理</h2><blockquote>
<p>Java中并没有直接提供对代理的支持,它是组合和继承的中庸之道</p>
</blockquote>
<ul>
<li>太空舱需要一个控制模块<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpacheShipControls</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">back</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">turboBoost</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="u6784_u9020_u592A_u7A7A_u8239_u7684_u4E00_u79CD_u65B9_u5F0F_3A_u7EE7_u627F"><a href="#u6784_u9020_u592A_u7A7A_u8239_u7684_u4E00_u79CD_u65B9_u5F0F_3A_u7EE7_u627F" class="headerlink" title="构造太空船的一种方式:继承"></a>构造太空船的一种方式:继承</h3><ul>
<li>然而继承后,通过子类可以调用父类所有的方法(非private),等于说将父类所有的方法暴露出来<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpaceShip</span> <span class="keyword">extends</span> <span class="title">SpacheShipControls</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpaceShip</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpaceShip protecor = <span class="keyword">new</span> SpaceShip(<span class="string">"NASA"</span>);</span><br><span class="line">        protecor.turboBoost(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="u53E6_u4E00_u79CD_u65B9_u5F0F_3A_u4EE3_u7406"><a href="#u53E6_u4E00_u79CD_u65B9_u5F0F_3A_u4EE3_u7406" class="headerlink" title="另一种方式:代理"></a>另一种方式:代理</h3><ul>
<li>代理:将一个成员置于所要构造的类中(就像组合),但与此同时我们暴露了该成员对象的所有方法(就像继承)</li>
<li>然而SpaceShipDelegation并不是一个SpaceShipControls类(因为没有继承),它仅仅是包含了一个SpaceShipControls对象.</li>
<li>但是使用代理我们可以有更多的控制力,因为我们可以只提供部分方法</li>
<li>Java不直接支持代理,但Intellij可以直接生成代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpaceShipDelegation</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> SpacheShipControls controls =<span class="keyword">new</span> SpacheShipControls();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">        controls.up(velocity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">        controls.down(velocity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">        controls.left(velocity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">        controls.right(velocity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">        controls.forward(velocity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">back</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">        controls.back(velocity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turboBoost</span><span class="params">(<span class="keyword">int</span> velocity)</span> </span>&#123;</span><br><span class="line">        controls.turboBoost(velocity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="u5728_u7EC4_u5408_u4E0E_u7EE7_u627F_u95F4_u9009_u62E9"><a href="#u5728_u7EC4_u5408_u4E0E_u7EE7_u627F_u95F4_u9009_u62E9" class="headerlink" title="在组合与继承间选择"></a>在组合与继承间选择</h2><blockquote>
<p>组合技术通常在新类中嵌入某个对象,让它实现所需要的功能,新类用户看到的只是为新类而定义的接口,而非嵌入对象的接口,这样是安全</p>
</blockquote>
<ul>
<li>允许用户访问嵌入类的接口(使嵌入类public)偶尔也是有意义的.当你正在新类内部组装一组部件时,会使的接口更容易理解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    公开Car的内部结构,让Car用户更有效的了解使用Car</span><br><span class="line">    */</span></span><br><span class="line">    <span class="keyword">public</span> Engine engine = <span class="keyword">new</span> Engine();</span><br><span class="line">    <span class="keyword">public</span> Wheel[] wheels = <span class="keyword">new</span> Wheel[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">public</span> Door left = <span class="keyword">new</span> Door(), right = <span class="keyword">new</span> Door();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            wheels[i] = <span class="keyword">new</span> Wheel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        car.left.window.rollUp();</span><br><span class="line">        car.wheels[<span class="number">0</span>].inflate(<span class="number">72</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inflate</span><span class="params">(<span class="keyword">int</span> psi)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollUp</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollDown</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Door</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Window window = <span class="keyword">new</span> Window();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="u5411_u4E0A_u8F6C_u578B"><a href="#u5411_u4E0A_u8F6C_u578B" class="headerlink" title="向上转型"></a>向上转型</h2><blockquote>
<p>&quot;为新类提供方法&quot;并不是继承技术中最重要的方面,更多的是表现新类和基类直接的关系,即&quot;新类是现有类的一种类型&quot;</p>
</blockquote>
<ul>
<li>由于继承可以确保基类中的方法在导出类中也同样有效,所以发送给基类的有效消息,同样也能有效的发送给基类.</li>
<li>Instrument有一个play()方法,而Wind也同样具备,那么我们可以准确的说Wind也是一种类型的Instrument</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instrument</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tune</span><span class="params">(Instrument i)</span></span>&#123;</span><br><span class="line">        i.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wind</span> <span class="keyword">extends</span> <span class="title">Instrument</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Wind flute =<span class="keyword">new</span> Wind();</span><br><span class="line">        Instrument.tune(flute);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>tune()接受是Instument类型,但是Wind.main()中,传递给tune()的却是一个Wind,Java对类型的检查十分严格,接受某一类型的方法却接受了另外一种类型,这很奇怪.除非认识到Wind也是一种Instument类型</li>
<li>同时也不存在任何tune()方法,可以通过Instument调用,而又不存在Wind中</li>
<li>代理比继承更安全,如果真的需要<strong>向上转型</strong>,在考虑继承</li>
</ul>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><h3 id="final_u6570_u636E_28_u66F4_u591A_u7684_u7528_u4E8E_u57FA_u672C_u6570_u636E_u7C7B_u578B_29"><a href="#final_u6570_u636E_28_u66F4_u591A_u7684_u7528_u4E8E_u57FA_u672C_u6570_u636E_u7C7B_u578B_29" class="headerlink" title="final数据(更多的用于基本数据类型)"></a>final数据(更多的用于基本数据类型)</h3><ol>
<li>一个永不改变的编译时常量</li>
<li>一个在运行时被初始化的值,而你不希望它被改变(定义时初始化/构造代码块初始化/代码块初始化)</li>
<li>基本数据类型 final使其值恒定不变</li>
<li>引用数据类 final使其引用恒定不变,即无法再让这个引用指向其他对象,但对象自身是可以修改的,然而这并没什么意义</li>
</ol>
<h3 id="final_u53C2_u6570"><a href="#final_u53C2_u6570" class="headerlink" title="final参数"></a>final参数</h3><blockquote>
<p>在参数列表中以声明的方式将参数指明为final,即无法在方法中更改参数引用指向的对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Glow</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">final</span> Glow glow)</span></span>&#123;</span><br><span class="line">      <span class="comment">//glow =new Glow(); 可以读取参数,但是无法修改引用指向</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(Glow glow)</span></span>&#123;</span><br><span class="line">        glow =<span class="keyword">new</span> Glow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="final_u65B9_u6CD5_28_u66F4_u591A_u7684_u7528_u4E8E_u7EE7_u627F_u7C7B_29"><a href="#final_u65B9_u6CD5_28_u66F4_u591A_u7684_u7528_u4E8E_u7EE7_u627F_u7C7B_29" class="headerlink" title="final方法(更多的用于继承类)"></a>final方法(更多的用于继承类)</h3><h4 id="u4E24_u4E2A_u539F_u56E0"><a href="#u4E24_u4E2A_u539F_u56E0" class="headerlink" title="两个原因"></a>两个原因</h4><ul>
<li><p><strong>效率,然而现在已经不再需要</strong></p>
</li>
<li><p>将代码锁住,以防任何继承类修改它的含义.出于设计的考虑:想确保在继承中使方法行为保持不变,并且不会被覆盖</p>
</li>
</ul>
<h4 id="final_private"><a href="#final_private" class="headerlink" title="final private"></a>final private</h4><ul>
<li>类中所有的private <strong>方法</strong>已经隐式得指定为final,在继承类中private方法子类无法继承,自然也无法覆盖,对private方法添加final修饰并无意义</li>
<li>final方法不同于private方法,都不可被修改,但final方法可以被子类调用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Glow</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Green</span> <span class="keyword">extends</span> <span class="title">Glow</span></span>&#123;<span class="comment">//没有能覆写的方法&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Green green =<span class="keyword">new</span> Green();</span><br><span class="line">        green.g(); <span class="comment">//final方法可以被调用,但无法覆写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="final_u7C7B"><a href="#final_u7C7B" class="headerlink" title="final类"></a>final类</h3><blockquote>
<p>将某个类定义为final,整个类域都是默认final的</p>
</blockquote>
<ul>
<li>你不打算继承该类,也不允许别人继承</li>
<li>出于某种考虑,你对该类的设计永不需要改动,或者出于安全的考虑,你不希望它有子类</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4EE3_u7406"><a href="#u4EE3_u7406" class="headerlink" title="代理"></a>代理</h2><blockquote>
<p>Java中并没有直接提供对代理的支持,它是组合和继承的中庸之道</p>
</b]]>
    </summary>
    
      <category term="Java" scheme="http://paracide.github.io/tags/Java/"/>
    
      <category term="代理" scheme="http://paracide.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="继承" scheme="http://paracide.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="Java" scheme="http://paracide.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Thinking In JAVA》笔记 5:初始化与清理]]></title>
    <link href="http://paracide.github.io/2016/08/29/thinginjava5/"/>
    <id>http://paracide.github.io/2016/08/29/thinginjava5/</id>
    <published>2016-08-29T15:51:35.000Z</published>
    <updated>2016-11-13T05:57:28.039Z</updated>
    <content type="html"><![CDATA[<h2 id="u65B9_u6CD5_u91CD_u8F7D"><a href="#u65B9_u6CD5_u91CD_u8F7D" class="headerlink" title="方法重载"></a>方法重载</h2><blockquote>
<p>构造器是强制重载方法名的另一个原因:构造器的名字已经由类名决定,那么当想以多种方式来构造对象时,必须用到方法重载</p>
</blockquote>
<h3 id="u4EE5_u8FD4_u56DE_u503C_u533A_u5206_u91CD_u8F7D_u65B9_u6CD5"><a href="#u4EE5_u8FD4_u56DE_u503C_u533A_u5206_u91CD_u8F7D_u65B9_u6CD5" class="headerlink" title="以返回值区分重载方法"></a>以返回值区分重载方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;; <span class="comment">//虽然有着同样的方法名和形式参数,但我们可以很容易的区分他们</span></span><br></pre></td></tr></table></figure>
<ul>
<li>只要编译器能够通过语境明确判断语义,例如 int i =f(),这样是可以区分重载方法的</li>
<li>但是有时会忽视返回值,而是为了方法调用的其他效果(为了方法调用的副作用),而不关心返回值,例如这样 <code>f()</code> 那么Java该去调用哪个f(),别人又该如何理解f()的意图呢?</li>
<li>所以以返回值来区分重载方法是行不通的</li>
</ul>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">    <span class="function">Leaf <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;<span class="comment">//返回了当前对象的引用,很容易在一条语句中对一个对象进行操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"i = "</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Leaf leaf=<span class="keyword">new</span> Leaf();</span><br><span class="line">        <span class="comment">//因为increment()返回了当前对象引用=&gt;leaf,所以又可以.increment(0了)</span></span><br><span class="line">        leaf.increment().increment().increment().print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span> <span class="params">(Apple apple)</span></span>&#123;</span><br><span class="line">        Apple peeled = apple.getPeeled();</span><br><span class="line">        System.out.println(<span class="string">"Yummy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Peeler</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Apple <span class="title">peel</span><span class="params">(Apple apple)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> apple;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span>&#123;</span><br><span class="line">    <span class="function">Apple <span class="title">getPeeled</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="comment">/*</span><br><span class="line">        Apple想调用一个外部方法,为了将自身传递过去,必须使用this</span><br><span class="line">        */</span></span><br><span class="line">        <span class="keyword">return</span> Peeler.peel(<span class="keyword">this</span>);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PassingThis</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person().eat(<span class="keyword">new</span> Apple());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u53EF_u53D8_u53C2_u6570_u5217_u8868"><a href="#u53EF_u53D8_u53C2_u6570_u5217_u8868" class="headerlink" title="可变参数列表"></a>可变参数列表</h2><blockquote>
<p> 可变参数列表 (Object...args),不需要显式的编写数组语法</p>
</blockquote>
<ul>
<li><p>普通的可变参数列表</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printyArray</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object obj : args) &#123;</span><br><span class="line">        System.out.print(obj + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>带一个非可变参数的方法,可以解决后面重载方法上的冲突<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSpecial</span><span class="params">(<span class="keyword">int</span> required, Object... args)</span> </span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"required:"</span> + required + <span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">for</span> (Object obj : args) &#123;</span><br><span class="line">        System.out.print(obj + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>非可变参数列表</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printNomarl</span><span class="params">(Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object obj : args) &#123;</span><br><span class="line">        System.out.print(obj + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>对于重载方法,应该只在一个重载方法中使用可变参数列表,或者不用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span> i, Character... args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"first"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span> c, Character... args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sencond"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// printNomarl(11,22.2,33.1,"huma");  不可变的参数列表,不可以直接这样,需要显式的编写数组写法</span></span><br><span class="line">        printNomarl(<span class="keyword">new</span> Object[]&#123;<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"four"</span>&#125;); <span class="comment">//不可变的参数列表,必须编写数组</span></span><br><span class="line">    <span class="comment">// 可变参数列表,</span></span><br><span class="line">        printyArray(<span class="number">11</span>, <span class="number">22.2</span>, <span class="number">33.1</span>, <span class="string">"huma"</span>);</span><br><span class="line">        printSpecial(<span class="number">2</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"kuma"</span>);</span><br><span class="line">        printSpecial(<span class="number">0</span>);</span><br><span class="line">   <span class="comment">//重载方法测试</span></span><br><span class="line">        f(<span class="number">1</span>, <span class="string">'a'</span>);</span><br><span class="line">        f(<span class="string">'a'</span>, <span class="string">'b'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">/*output</span><br><span class="line">one two four </span><br><span class="line">11 22.2 33.1 huma </span><br><span class="line">required:2 two three kuma </span><br><span class="line">required:0 </span><br><span class="line">first</span><br><span class="line">sencond */</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u65B9_u6CD5_u91CD_u8F7D"><a href="#u65B9_u6CD5_u91CD_u8F7D" class="headerlink" title="方法重载"></a>方法重载</h2><blockquote>
<p>构造器是强制重载方法名]]>
    </summary>
    
      <category term="Java" scheme="http://paracide.github.io/tags/Java/"/>
    
      <category term="初始化" scheme="http://paracide.github.io/tags/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
      <category term="Java" scheme="http://paracide.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Android开发艺术探索》笔记:IPC机制]]></title>
    <link href="http://paracide.github.io/2016/04/20/%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E7%AC%94%E8%AE%B0_ipc/"/>
    <id>http://paracide.github.io/2016/04/20/开发艺术笔记_ipc/</id>
    <published>2016-04-20T15:51:35.000Z</published>
    <updated>2016-04-20T09:16:22.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u591A_u8FDB_u7A0B"><a href="#u591A_u8FDB_u7A0B" class="headerlink" title="多进程"></a>多进程</h1><ul>
<li>可以是多个App之间,也可以是同一个App内部不同组件之间.两者在IPC是一样的,系统都为每个进程分配了一个单独的虚拟机</li>
<li>通过在AndroidMainfest.xml中指定四大组件的<code>android:process</code>来实现多进程</li>
<li>会造成静态成员单例模式失效,线程同步机制失效,<strong>SharedPreference</strong>的可靠性降低,多次创建Application等问题</li>
<li>有时候有些模块需要单独进程运行,或者通过多进程获取更多的内存(sdk11之后似乎提高到了1G),然而不同进程间往往需要共享数据,这时候就需要IPC了</li>
</ul>
<h1 id="IPC_u57FA_u7840"><a href="#IPC_u57FA_u7840" class="headerlink" title="IPC基础"></a>IPC基础</h1><h2 id="Serializable_u548CParcelable"><a href="#Serializable_u548CParcelable" class="headerlink" title="Serializable和Parcelable"></a>Serializable和Parcelable</h2><ul>
<li>Serializable是Java中的序列化接口,使用了大量的I/O操作,开销很大</li>
<li>Parcelable是Android自带的序列化接口,开销低.</li>
</ul>
<h2 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h2><ul>
<li>Binder非常的复杂,同时在Android进程间通信上也非常的重要</li>
<li>Binder主要用在Service中,包括AIDL和Messenger,Messenger的底层其实就是AIDL</li>
</ul>
<h2 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h2><p>AIDL:一个用于快速创建Binder的工具,没有AIDL文件也可以自己写Binder文件</p>
<h3 id="Android_Studio_u4E2D_u901A_u8FC7AIDL_u521B_u5EFABinder_u7C7B"><a href="#Android_Studio_u4E2D_u901A_u8FC7AIDL_u521B_u5EFABinder_u7C7B" class="headerlink" title="Android Studio中通过AIDL创建Binder类"></a>Android Studio中通过AIDL创建Binder类</h3><ul>
<li><p>书上用的Eclipse,将Book.java Book.aidl IBookManager.aidl放在main/java/aidl下</p>
</li>
<li><p>Android Studio下通过自带的new AIDL会在main包下建立一个与java包平行的aidl包.然而将自定义类Book.java和它在AIDL类中的声明Book.aidl放在里面,再<strong>Make Project</strong>会报错从而无法生成IBookManager.java</p>
</li>
</ul>
<p><img src="http://7xpcgs.com1.z0.glb.clouddn.com/aidl_androidstudio.png" alt="此处输入图片的描述"><br>Goolge了各种方法,按照图上的结构可以Make Project成功</p>
<h3 id="interface_IBookManager_extends_android-os-IInterface"><a href="#interface_IBookManager_extends_android-os-IInterface" class="headerlink" title="interface IBookManager extends android.os.IInterface"></a>interface IBookManager extends android.os.IInterface</h3><ul>
<li>这是由系统通过AIDL文件生成的Binder接口(AIDL接口),声明了getBookList()和addBook()两个方法,还包含一个实现了这个接口的内部抽象类 <code>public static abstract class Stub extends android.os.Binder implements com.haclep.ipctest.IBookManager</code></li>
<li>在服务端:通过<code>new IBookManager.Stub()</code>来创建一个Binder对象,将其跨进程传递给客户端</li>
<li>在客户端:通过<code>IBookManager.Stub().asInterface(IBinder)</code>,将传递过来的Binder对象作为参数转换为AIDL接口类型的对象(IBookManager BookManager).客户端通过这个BookManager就可以调用服务端的方法了.</li>
</ul>
<h1 id="IPC_u65B9_u5F0F"><a href="#IPC_u65B9_u5F0F" class="headerlink" title="IPC方式"></a>IPC方式</h1><h2 id="Bundle"><a href="#Bundle" class="headerlink" title="Bundle"></a>Bundle</h2><ul>
<li>四大组件中的Activity,Service,Receiver都支持在Intent中传递Bundle数据</li>
<li>传递的数据必须可以序列化:基本类型,实现了Parcelable/Serializable接口的对象和一些Android支持的特殊对象.其他的则无法通过Bundle传递</li>
</ul>
<h2 id="u6587_u4EF6_u5171_u4EAB"><a href="#u6587_u4EF6_u5171_u4EAB" class="headerlink" title="文件共享"></a>文件共享</h2><ul>
<li>几个进程通过读写通过读写同一个文件来共享数据,但在多线程的并发读写下会出问题</li>
<li>SharedPreference底层采用的XML文件,系统在内存中有着一份SharedPreference的缓存,但在多进程情况下,仍会不可靠</li>
</ul>
<h2 id="AIDL-1"><a href="#AIDL-1" class="headerlink" title="AIDL"></a>AIDL</h2><h3 id="u76EE_u6807_u4E00"><a href="#u76EE_u6807_u4E00" class="headerlink" title="目标一"></a>目标一</h3><ul>
<li>客户端向服务端添加一本书,获取图书列表</li>
</ul>
<h4 id="u670D_u52A1_u7AEF"><a href="#u670D_u52A1_u7AEF" class="headerlink" title="服务端"></a>服务端</h4><ul>
<li>通过 <code>new IBookManager.Stub()</code>创建一个Binder对象,在<code>onBind()</code>中返还这个Binder给客户端.</li>
</ul>
<h4 id="u5BA2_u6237_u7AEF"><a href="#u5BA2_u6237_u7AEF" class="headerlink" title="客户端"></a>客户端</h4><ul>
<li><code>new ServiceConnection()</code>对象,因为绑定是异步的,<code>bindService()</code>会立刻返回而不会返回Binder,接收来自服务端的Binder需要在binderSerive()时将serviceConnection对象作为参数传递过去,ServiceConnection包含一个回调方法，系统调用这个方法来传递要返回的Binder．</li>
<li>一旦Binder传递过来,回调<code>onServiceConnection()</code>,用<code>IBookManager.Stub.asInterface(IBinder binder)</code>将Binder转化为系统封装后的Stub.proxy对象(因为跨进程),也就是IBookManager的实现类对象</li>
<li>通过IBookManager在客户端发送远程请求(即调用服务端的<code>getList()</code>,<code>addBook(Book book)</code>等方法),同时当前线程挂起<ul>
<li>远程请求走跨进程的Transact途径,这个逻辑由Stub内部代理类Proxy完成</li>
<li>在Proxy中创建data,reply两个Parcel对象并且将远程请求的参数写入到data</li>
<li>通过底层驱动的binder将data,reply两个对象以及所调用方法的代号transact过去<ul>
<li><code>mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, 0);</code></li>
</ul>
</li>
<li>服务端Binder线程池中的onTransact将请求的结果写入reply中,返还给客户端同时唤醒客户端</li>
</ul>
</li>
</ul>
<h3 id="u76EE_u6807_u4E8C"><a href="#u76EE_u6807_u4E8C" class="headerlink" title="目标二"></a>目标二</h3><ul>
<li>服务提供注册和解除注册监听新书服务,并且每5秒添加一本书</li>
<li>客户端注册监听新书服务,同时将新书打印出来</li>
</ul>
<h4 id="AIDL_u63A5_u53E3"><a href="#AIDL_u63A5_u53E3" class="headerlink" title="AIDL接口"></a>AIDL接口</h4><ul>
<li><p>新建一个AIDL接口,并且在原来的IBookManager接口中新添 <code>registerListener()</code>和<code>unregisterListener()</code>两个方法</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IOnNewBookArrivedListener</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onNewBookArrived</span>(<span class="params"><span class="keyword">in</span> Book newbook</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>为什么要新建一个接口,而不是<code>把onNewBookArrivced()</code>放到原来的接口呢? </p>
<ul>
<li>我认为的是原来的IBookManager接口是服务端提供给客户端来调用服务端的方法的,</li>
<li><code>IOnNewBookArrivedListener()</code>是客户端提供给服务端的,每当服务端有新书到达时,调用客户端的<code>onNewBookArrived()</code>方法来通知客户端有新书到了.同时<code>IOnNewBookArrivedListener()</code>的实现类对象是要放入到服务端的<code>RemoteCallbackList&lt;IOnNewBookArrivedListener&gt;</code>中的(这个List用来存放那些需要通知的客户端)</li>
</ul>
</li>
</ul>
<h4 id="u5BA2_u6237_u7AEF-1"><a href="#u5BA2_u6237_u7AEF-1" class="headerlink" title="客户端"></a>客户端</h4><ul>
<li><code>new IOnNewBookArrivedListener.Stub()</code> 来创建一个listener对象(Binder),覆写<code>onNewBookArrived()</code>方法</li>
<li>在<code>onServiceConnected()</code>中调用<code>bookmanager.registerListener(listener)</code>来实现注册</li>
<li>RemoteCallbackList会在客户端进程终止后,自动移除注册的listener,所有不需要在<code>onServiceDisconnected()</code>中调用<code>bookmanager.unregisterListener(listener)</code></li>
</ul>
<h4 id="u670D_u52A1_u7AEF-1"><a href="#u670D_u52A1_u7AEF-1" class="headerlink" title="服务端"></a>服务端</h4><ul>
<li>创建一个RemoteCallbackList,用于存放注册的Listener,RemoteCallbackList是系统专门用于删除跨进程Listener的接口.因为虽然注册和解注册的是同一个客户端对象,但是通过Binder传递到服务器后会产生2个新的对象.RemoteCallbackList()内部有个Map用于保存所有的AIDL回调,虽然会产生不同的对象,但他们底层的Binder对象是同一个.  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RemoteCallbackList<span class="tag">&lt;<span class="title">IOnNewBookArrivedListener</span>&gt;</span> mListenersList = new RemoteCallbackList<span class="tag">&lt;&gt;</span>();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>-覆写 <code>Binder mBinder = new IBookManager.Stub()</code>中新添加的两个方法,这里使用的RemoteCallbackList的register()和unregitster()方法,而不是add()<br>    <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(IOnNewBookArrivedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line"></span><br><span class="line">       mListenersList.register(listener);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(IOnNewBookArrivedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">       mListenersList.unregister(listener);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>创建一个<code>onNewBookArrived()</code>方法和一个每5秒就更新一本书的线程.每次将新书作为参数调用<code>OnNewBookArrived()</code>方法.</li>
<li>在<code>onNewBookArrived()</code>方法中将list中的listener顺序取出,回调listener的<code>onNewBookArrived()</code>方法,这方法在客户端的Binder线程池中执行</li>
</ul>
<h3 id="u601D_u7EF4_u56FE"><a href="#u601D_u7EF4_u56FE" class="headerlink" title="思维图"></a>思维图</h3><p>按照我现在的理解做出的一个过程图,待更加深入学习后再完善以及修正错误<br><img src="http://7xpcgs.com1.z0.glb.clouddn.com/ipc.png" alt="IPC图"></p>
<h2 id="Messenger"><a href="#Messenger" class="headerlink" title="Messenger"></a>Messenger</h2><ul>
<li>对AIDL进行了封装,使用简单,支持一对多的串行通信,支持实时通信</li>
<li>但是不能很好处理高并发情形,只能传输Bundle支持的类型</li>
</ul>
<h3 id="u5BA2_u6237_u7AEF-2"><a href="#u5BA2_u6237_u7AEF-2" class="headerlink" title="客户端"></a>客户端</h3><ul>
<li>创建一个ServiceConnection用于bindService</li>
<li>创建一个handler用于处理来自服务端的message</li>
<li>用这个hanlder作为参数构建一个Messenger mGetReplyMessenger,这个mGetReplyMessenger是给服务端用来回复的</li>
<li>在onServiceConnection()中,用返回的Binder构建一个mMessenger.同时构建一个Message mMessage和Bundle bundle,在bundle中存入你需要传递的信息,把bundle放入到mMessage中,同时设置<code>mMessage.replyTo = mGetReplyMessenger</code>,这是为了将mGetReplyMessenger传递给服务端,让服务端用这个mGetReplyMessenger来回应客户端.</li>
<li><code>mMessenger.send(mMessage)</code>发送消息到客户端</li>
</ul>
<h3 id="u670D_u52A1_u7AEF-2"><a href="#u670D_u52A1_u7AEF-2" class="headerlink" title="服务端"></a>服务端</h3><ul>
<li>创建一个handler来处理来自客户端的message</li>
<li>用这个handler作为参数构建一个<code>Messenger mMessenger = Messenger(Handler handler)</code>,还有个构造方法是Messenger(IBinder binder).</li>
<li>当服务端被客户端绑定时 在<code>onBind()</code>内返还这个Messenger底层的Binder:<code>returnmMessenger.asBinder()</code></li>
<li>在handler中,使用传递过来的<code>mMessage.replyto</code>来新建一个Messenger对象client,使用这个client发送message给服务端</li>
</ul>
<p>整个过程回想起来,跟AIDL的过程非常相似,毕竟底层就是AIDL</p>
<h2 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h2><h3 id="u81EA_u5B9A_u4E49_u7684ContentProvider"><a href="#u81EA_u5B9A_u4E49_u7684ContentProvider" class="headerlink" title="自定义的ContentProvider"></a>自定义的ContentProvider</h3><ul>
<li>创建一个类并且继续ContentProvider,同时实现6个抽象方法就行了,其中除了onCreate()运行在主线程,其他5个都运行在Binder线程池中</li>
<li>5个方法中的upDate(),insert(),delete()会引起数据源的改变.通过<code>getContext().getContentResolver().notifyChange(uri, null);</code>来通知外界数据源改变了</li>
</ul>
<h1 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h1><p><a href="https://github.com/paracide/Demo-IPCTest" target="_blank" rel="external">Github</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u591A_u8FDB_u7A0B"><a href="#u591A_u8FDB_u7A0B" class="headerlink" title="多进程"></a>多进程</h1><ul>
<li>可以是多个App之间,也可以是同一个App内部不同组件之间.两者]]>
    </summary>
    
      <category term="AIDL" scheme="http://paracide.github.io/tags/AIDL/"/>
    
      <category term="Android" scheme="http://paracide.github.io/tags/Android/"/>
    
      <category term="Binder" scheme="http://paracide.github.io/tags/Binder/"/>
    
      <category term="IPC" scheme="http://paracide.github.io/tags/IPC/"/>
    
      <category term="Messenger" scheme="http://paracide.github.io/tags/Messenger/"/>
    
      <category term="Android" scheme="http://paracide.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Android开发艺术探索》笔记:Activity生命周期与启动模式]]></title>
    <link href="http://paracide.github.io/2016/04/11/%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E7%AC%94%E8%AE%B0_activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://paracide.github.io/2016/04/11/开发艺术笔记_activity生命周期/</id>
    <published>2016-04-11T15:51:35.000Z</published>
    <updated>2016-04-11T07:40:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Activity_u751F_u547D_u5468_u671F"><a href="#Activity_u751F_u547D_u5468_u671F" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h1><h2 id="u4E00_u822C_u60C5_u51B5"><a href="#u4E00_u822C_u60C5_u51B5" class="headerlink" title="一般情况"></a>一般情况</h2><p>当前为Activty A,启动B,会先执行A的onPause,再执行B的onResume<br>因此onPasue中不要放耗时的任务,如果需要则放到onStop中,这样会加快B出在用户面前.</p>
<h2 id="u5F02_u5E38_u60C5_u51B5"><a href="#u5F02_u5E38_u60C5_u51B5" class="headerlink" title="异常情况"></a>异常情况</h2><h3 id="u8D44_u6E90_u76F8_u5173_u7684_u7CFB_u7EDF_u914D_u7F6E_u53D1_u751F_u6539_u53D8_u5BFC_u81F4Activity_u88AB_u6740_u6B7B_u5E76_u91CD_u65B0_u521B_u5EFA"><a href="#u8D44_u6E90_u76F8_u5173_u7684_u7CFB_u7EDF_u914D_u7F6E_u53D1_u751F_u6539_u53D8_u5BFC_u81F4Activity_u88AB_u6740_u6B7B_u5E76_u91CD_u65B0_u521B_u5EFA" class="headerlink" title="资源相关的系统配置发生改变导致Activity被杀死并重新创建"></a>资源相关的系统配置发生改变导致Activity被杀死并重新创建</h3><h4 id="u5178_u578B_u7684_u5C31_u662F_u4ECE_u7AD6_u5C4F_u5207_u6362_u5230_u6A2A_u5C4F"><a href="#u5178_u578B_u7684_u5C31_u662F_u4ECE_u7AD6_u5C4F_u5207_u6362_u5230_u6A2A_u5C4F" class="headerlink" title="典型的就是从竖屏切换到横屏"></a>典型的就是从竖屏切换到横屏</h4><ul>
<li>这是一个确定的会重新创建Activity的异常情况(而不是正常被杀死的情况)</li>
<li>在<code>onStop</code>前调用<code>onSaveInstanceState</code>(与<code>onPause</code>则无先后顺序)保存当前状态</li>
<li>在<code>onStart</code>后调用<code>onRestoreInstanceState</code>恢复状态</li>
</ul>
<h4 id="u8BBE_u7F6E_u4E0D_u91CD_u65B0_u521B_u5EFA"><a href="#u8BBE_u7F6E_u4E0D_u91CD_u65B0_u521B_u5EFA" class="headerlink" title="设置不重新创建"></a>设置不重新创建</h4><ul>
<li><p>在<code>AndroidManifest.xml</code>中设置<code>android:configChanges = &quot;orientation|screenSize&quot;</code>可以使不重新创建. </p>
<ol>
<li>orientation是指的屏幕方向的改变</li>
<li>sreenSize是屏幕大小的改变,在SDK13之后,旋转屏幕屏幕大小会改变从而重启Activity</li>
</ol>
</li>
<li><p>设置<code>android:configChanges = &quot;orientation|screenSize&quot;</code>后,不调用之前的2个方法来恢复数据,而是调用<code>onConfigurationChanged</code></p>
</li>
</ul>
<h3 id="u7CFB_u7EDF_u8D44_u6E90_u4E0D_u8DB3_u800C_u6740_u6B7B"><a href="#u7CFB_u7EDF_u8D44_u6E90_u4E0D_u8DB3_u800C_u6740_u6B7B" class="headerlink" title="系统资源不足而杀死"></a>系统资源不足而杀死</h3><p>如果一个进程没有四大组件任何一个,则会很快被杀死.如果需要,则放到service里面</p>
<h1 id="Android_Activity_u542F_u52A8_u6A21_u5F0F"><a href="#Android_Activity_u542F_u52A8_u6A21_u5F0F" class="headerlink" title="Android Activity启动模式"></a>Android Activity启动模式</h1><h2 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h2><ol>
<li><strong>在哪个任务栈所属的Ativity启动standard模式的A,就将新创建的A放到哪个任务栈中</strong></li>
</ol>
<h2 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h2><ol>
<li>当FirstActivity处于栈顶时,无法再通过startActivity(intent)来创建一个新的FirstActivity</li>
<li>但当FirstActivity不处于栈顶(栈顶为SecondActivity)时,可以通过startActivity来完成.</li>
</ol>
<h2 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h2><ol>
<li>默认<code>cleanTop</code>效果即singleTask的C从任务栈为CAD中回到top时,会将他前面的AD出栈.</li>
<li>与<code>TaskAffinity</code>配合时,待启动的Activty会放在名字与<code>TaskAffinity</code>属性相同的任务栈中</li>
</ol>
<h2 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h2><ol>
<li>为了让其他APP能够共享这个Activity时候,这个Activity是唯一的.</li>
<li>实现以上目的就需要这个模式,其他3个无法实现</li>
<li>会单独将这个Activity作为一个返回栈</li>
</ol>
<h2 id="u6307_u5B9A_u542F_u52A8_u6A21_u5F0F"><a href="#u6307_u5B9A_u542F_u52A8_u6A21_u5F0F" class="headerlink" title="指定启动模式"></a>指定启动模式</h2><ol>
<li><p>在AndroidMenifest中<br><code>android:launchMode = &quot;singleTask&quot;</code><br> 这种无法指定<code>FLAG_ACTIVTY_CLEAR_TOP</code></p>
</li>
<li><p>Intent指定<br><code>intent.addFlags(Intent.FLAG._ACTIVITY_NEW_TASK)</code><br> 无法设为 <code>singleInstance</code></p>
</li>
</ol>
<h1 id="IntentFilter"><a href="#IntentFilter" class="headerlink" title="IntentFilter"></a>IntentFilter</h1><ul>
<li>隐式调用Activity需要Intent同时匹配目标Activity中的<code>action</code>,<code>category</code>,<code>data</code>信息</li>
<li>一个Acitivty可以设置多组IntentFilter,只要匹配其中一组就可以启动</li>
</ul>
<h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><ul>
<li>Intent中必须有1个,否则失败,可以设置多个</li>
<li>IntentFilter中可以多个action,且至少有一个能和Intent中的匹配,否贼失败</li>
</ul>
<h2 id="category"><a href="#category" class="headerlink" title="category"></a>category</h2><ul>
<li>Intent中可以没有category,可以多个</li>
<li>只要存在category,则存在的每一个都必须和IntentFilter中的匹配</li>
<li>系统在调用startActivity和startActivtyForReuslt时,会默认加上<code>android.intent.category.DEFAULT</code></li>
<li>所以当一个acitvity想要可以隐式调用时,必须在IntentFilter中指定<code>android.intent.category.DEFAULT</code></li>
</ul>
<h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><ul>
<li>Intent必须有data数据,且data能完全匹配IntentFilter中的某个data.</li>
<li>data分为两部分<ul>
<li>mineType 媒体类型 image/jpeg video/*等</li>
<li>URI: Scheme为URI模式,可以为http,content,file.<br>  <code>&lt;shceme&gt;://&lt;host&gt;:&lt;post&gt;/&lt;path&gt;|&lt;pathPrefix&gt;|&lt;pathPattern&gt;</code><br>  <a href="http://www.google.com:80/search/info" target="_blank" rel="external">http://www.google.com:80/search/info</a></li>
<li>IntentFilter中可以<code>&lt;data android:mimeType=&quot;image/*&quot;</code>,虽然没有指定URI,但默认为file或者content,所以Intent中必须指定URI为content/file才能匹配:<code>intent.setDataAndType(Uri.parse(&quot;file://abe&quot;),&quot;image/png&quot;)</code></li>
</ul>
</li>
<li>设置完整的Data数据,必须使用setDataAndTpye,因为setData和setType会互相清楚数据</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Activity_u751F_u547D_u5468_u671F"><a href="#Activity_u751F_u547D_u5468_u671F" class="headerlink" title="Activity生命周期"></a>Activity生命]]>
    </summary>
    
      <category term="Activity" scheme="http://paracide.github.io/tags/Activity/"/>
    
      <category term="Android" scheme="http://paracide.github.io/tags/Android/"/>
    
      <category term="IntentFilter" scheme="http://paracide.github.io/tags/IntentFilter/"/>
    
      <category term="Android" scheme="http://paracide.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[总结:跟着《第一行代码》完成天气App]]></title>
    <link href="http://paracide.github.io/2016/03/27/kumaweather_record/"/>
    <id>http://paracide.github.io/2016/03/27/kumaweather_record/</id>
    <published>2016-03-27T03:11:11.000Z</published>
    <updated>2016-11-13T06:04:32.312Z</updated>
    <content type="html"><![CDATA[<p>自学阶段练习的一个Demo</p>
<h1 id="u6570_u636E_u5E93"><a href="#u6570_u636E_u5E93" class="headerlink" title="数据库"></a>数据库</h1><h2 id="u57CE_u5E02_u5217_u8868_u83B7_u53D6"><a href="#u57CE_u5E02_u5217_u8868_u83B7_u53D6" class="headerlink" title="城市列表获取"></a>城市列表获取</h2><ul>
<li><p><strong>书上用的中国天气网API已经无法获取中国所有省份名称代号</strong></p>
<p>  期间经历了各种探索,最终从Github上一个<a href="https://github.com/xcc3641/SeeWeather" target="_blank" rel="external">SeeWeather</a>的源码     上发现导入外源数据库是可行的<br>  主要参考的<a href="http://justlpf.blog.51cto.com/3889157/1119440" target="_blank" rel="external">如何导入已有的外部数据库</a></p>
</li>
</ul>
<h2 id="WeatherDB_2C_u6570_u636E_u5E93_u529F_u80FD_u7BA1_u7406_u7C7B"><a href="#WeatherDB_2C_u6570_u636E_u5E93_u529F_u80FD_u7BA1_u7406_u7C7B" class="headerlink" title="WeatherDB,数据库功能管理类"></a>WeatherDB,数据库功能管理类</h2><p>别人的数据库各式各样,自己则无法满足</p>
<ul>
<li><strong>City表中仅有CityId,没有ProvinceId，无法通过传过来的ProvinceId来选择相对应的City.</strong></li>
</ul>
<p>看表发现CityId的前2位就是ProvinceId，进行筛选就行了.<br>具体参考<a href="http://www.runoob.com/sqlite/sqlite-tutorial.html" target="_blank" rel="external">SQLite教程</a></p>
<ul>
<li><strong>部分Province筛选出的City还有其他Province的City.</strong></li>
</ul>
<p><img src="http://7xpcgs.com1.z0.glb.clouddn.com/provincee.png" alt="province"></p>
<p>一开始我将province,city,area的no都设为int,认为在getInt过程中    会把01去掉从而导致北京的proId为1,进而在筛选City时,把所有1开头    的选入了.</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NumberFormat <span class="built_in">nf</span> = <span class="keyword">new</span> DecimalFormat(<span class="string">"00"</span>);</span><br><span class="line"><span class="keyword">String</span> formatProId = <span class="built_in">nf</span>.format(proId);</span><br></pre></td></tr></table></figure>
<p>经过上述格式化后,01~09的province下筛选city正常,我也觉得我的猜想是对的.然而又遇到了接下来的问题</p>
<ul>
<li><strong>CityId为0xxx的City无法筛选相应的Area</strong></li>
</ul>
<p><img src="http://7xpcgs.com1.z0.glb.clouddn.com/city.png" alt="City"><br>格式化也不对，经过debug发现原本应该为0101的北京城市ID变成了65,<br>猜想是进制出了问题,经Google查得：</p>
<blockquote>
<p>java中int i = 0101 前面加上0会默认为8进制,从而变成了65</p>
</blockquote>
<p>但数据库取出来就是0101,也没找到强制十进制的方法<br>后来尝试换成String类型就解决了以上2个问题.</p>
<h1 id="JSON_u89E3_u6790"><a href="#JSON_u89E3_u6790" class="headerlink" title="JSON解析"></a>JSON解析</h1><h2 id="GSON"><a href="#GSON" class="headerlink" title="GSON"></a>GSON</h2><p>书上的JSON看上去并不复杂，Gson解析起来很简单.<br>然而当我试了聚合数据和和风天气2个API返回的JSON时，又一脸懵逼了.</p>
<p>尤其和风天气，它在JSON数据的最外层加了[{}]，而且只有一个，并不是作为List存在，令我很不高兴进而转向聚合数据（然而现在却觉得聚合数据免费的API相对于和风天气免费的API缺了太多东西）</p>
<p>计划准备解析更多的数据时,觉得创建Bean的过程实在浪费时间,随后发现一个<strong>GsonFormat</strong>插件,可以通过JSON数据直接转为Bean,节省了大量时间</p>
<h1 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h1><p>AppWidgetProvider的updatePeriodMillis最小是30分钟,对于免费Api的天气更新来说已经足够<br>然而用户大部分时间在Widget中获取的信息是每分钟更新当前的时间<br>AppWidgetProvider本身无法满足需求,需要创建一个Service来实现</p>
<p>在Service中创建一个BroadcastReceiver来接收以下几个action从而达成时间的更新<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"<span class="tag">android</span><span class="class">.intent</span><span class="class">.action</span><span class="class">.TIME_TICK</span>"</span><br><span class="line">"<span class="tag">android</span><span class="class">.intent</span><span class="class">.action</span><span class="class">.TIME_SET</span>"</span><br><span class="line">"<span class="tag">android</span><span class="class">.intent</span><span class="class">.action</span><span class="class">.DATE_CHANGED</span>"</span><br><span class="line">"<span class="tag">android</span><span class="class">.intent</span><span class="class">.action</span><span class="class">.TIMEZONE_CHANGED</span>"</span><br></pre></td></tr></table></figure></p>
<p>天气信息的更新则通过<br>Service存在时继续执行startService(),不再调用onCreate()方法,会调用Service的onStartCommand方法<br>在onStartCommand方法中调用 updateWeather()来完成更新</p>
<p>后来觉得通过发送广播来更新会更加像Android的逻辑,然而我目前还不清楚这2种方案的存在这什么差别,就暂且没管.</p>
<h1 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h1><p>作为要给伪谷粉,对于MaterialDesign是相当的喜爱,于是就启动了全新的UI</p>
<h2 id="u4E0B_u62C9_u5237_u65B0"><a href="#u4E0B_u62C9_u5237_u65B0" class="headerlink" title="下拉刷新"></a>下拉刷新</h2><ul>
<li><strong>当AppBar处于折叠状态时,下拉手势时会造成AppBar向下滑动和SwipeRefresh刷新冲突</strong></li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onOffsetChanged</span><span class="params">(AppBarLayout appBarLayout, <span class="keyword">int</span> verticalOffset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(verticalOffset == <span class="number">0</span>)&#123;</span><br><span class="line">            mSwipeRefresh.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            mSwipeRefresh.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>verticalOffset就是AppbarLayout垂直方向上的偏移量,我需要AppBar完全显示时允许刷新,也就是verticalOffset的值为0的时候.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自学阶段练习的一个Demo</p>
<h1 id="u6570_u636E_u5E93"><a href="#u6570_u636E_u5E93" class="headerlink" title="数据库"></a>数据库</h1><h2 id="u57CE_u5E02_]]>
    </summary>
    
      <category term="Android" scheme="http://paracide.github.io/tags/Android/"/>
    
      <category term="GSON" scheme="http://paracide.github.io/tags/GSON/"/>
    
      <category term="OKHTTP" scheme="http://paracide.github.io/tags/OKHTTP/"/>
    
      <category term="SQLite" scheme="http://paracide.github.io/tags/SQLite/"/>
    
      <category term="Android" scheme="http://paracide.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git学习笔记]]></title>
    <link href="http://paracide.github.io/2016/01/31/git/"/>
    <id>http://paracide.github.io/2016/01/31/git/</id>
    <published>2016-01-31T15:51:35.000Z</published>
    <updated>2016-03-25T10:02:51.000Z</updated>
    <content type="html"><![CDATA[<p>所有版本管理软件只能追踪文本的具体修改，例如在第二行末尾加入来个“kuma”<br>而word,音乐，视频等二进制文件无法追踪具体修改,仅能告诉你文件大小从100KB变更为120KB。</p>
<h2 id="u521B_u5EFA_u4ED3_u5E93"><a href="#u521B_u5EFA_u4ED3_u5E93" class="headerlink" title="创建仓库"></a>创建仓库</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init //创建仓库</span><br><span class="line">git add file.txt//向<span class="keyword">state</span>添加文件</span><br><span class="line">git add file2.txt// 一次可以添加多个</span><br><span class="line">git commit -m <span class="string">"提交注释"</span>//将<span class="keyword">state</span>的内容提交给当前分支。</span><br></pre></td></tr></table></figure>
<p>注释理论必须写，方便自己他人查看时知道commit了什么内容</p>
<h2 id="u5206_u652F"><a href="#u5206_u652F" class="headerlink" title="分支"></a>分支</h2><h3 id="u521B_u5EFA_u5207_u6362_u5206_u652F"><a href="#u521B_u5EFA_u5207_u6362_u5206_u652F" class="headerlink" title="创建切换分支"></a>创建切换分支</h3><p>默认创建master分支作为主分支.<br>master分支最好仅用于正式版本的发布</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout -<span class="tag">b</span> kuma <span class="comment">//创建kuma分支并且切换过去 相当于</span></span><br><span class="line"></span><br><span class="line">git branch kuma <span class="comment">//创建分支</span></span><br><span class="line">git checkout kuma <span class="comment">//切换分支</span></span><br><span class="line"></span><br><span class="line">git branch -d kuma<span class="comment">//删除kuma分支</span></span><br></pre></td></tr></table></figure>
<h3 id="u5408_u5E76_u5206_u652F"><a href="#u5408_u5E76_u5206_u652F" class="headerlink" title="合并分支"></a>合并分支</h3><h4 id="merge_u5FEB_u901F_u5408_u5E76_uFF08fast-forward_uFF09"><a href="#merge_u5FEB_u901F_u5408_u5E76_uFF08fast-forward_uFF09" class="headerlink" title="merge快速合并（fast-forward）"></a>merge快速合并（fast-forward）</h4><p>master分支内容没有修改，bugfix分支包含master分支的所有历史记录，可以直接进行fast-forward合并<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="keyword">master</span></span><br><span class="line"><span class="title">git</span> merge bugfix</span><br></pre></td></tr></table></figure></p>
<p><img src="http://backlogtool.com/git-guide/cn/img/post/stepup/capture_stepup1_4_1.png" alt="fast-forward前"><br>master分支并没有新的内容，ff直接将bugfix分支转化为了master分支<br><img src="http://backlogtool.com/git-guide/cn/img/post/stepup/capture_stepup1_4_2.png" alt="fast-forward后"></p>
<h4 id="u89E3_u51B3_u51B2_u7A81_u5408_u5E76"><a href="#u89E3_u51B3_u51B2_u7A81_u5408_u5E76" class="headerlink" title="解决冲突合并"></a>解决冲突合并</h4><h5 id="merge_u5408_u5E76_28_u5386_u53F2_u8BB0_u5F55_u590D_u6742_29"><a href="#merge_u5408_u5E76_28_u5386_u53F2_u8BB0_u5F55_u590D_u6742_29" class="headerlink" title="merge合并(历史记录复杂)"></a>merge合并(历史记录复杂)</h5><p>将两条并行分支内容合并到一个新commit</p>
<p>master分支在bugfix分支出去后有了更新，这时候就无法快速合并。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge bugix //这时候会让去修改文件，修改完后在添加到<span class="keyword">state</span>,提交</span><br><span class="line"></span><br><span class="line">git add readme.txt</span><br><span class="line">git commit -m <span class="string">"合并bugfix"</span> //这个时候就会有个新的commit出现,来源于这里！</span><br></pre></td></tr></table></figure></p>
<p><img src="http://backlogtool.com/git-guide/cn/img/post/stepup/capture_stepup1_4_4.png" alt="merge合并冲突"></p>
<h6 id="rebase_u5408_u5E76__u5386_u53F2_u8BB0_u5F55_u7B80_u6D01"><a href="#rebase_u5408_u5E76__u5386_u53F2_u8BB0_u5F55_u7B80_u6D01" class="headerlink" title="rebase合并 历史记录简洁"></a>rebase合并 历史记录简洁</h6><p>将分支的内容rebase化（当然需要先修改冲突），使其可以进行快速合并，然而切换到master进行快速合并。<br>而不是并行然后合并成一个新的commit，这样可能会显得简洁<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git checkout bugfix</span><br><span class="line">git rebase <span class="literal">master</span>//之后要去修改文件</span><br><span class="line"></span><br><span class="line">git add readme.txt</span><br><span class="line">git rebase --continue //这样bugfix已经相对于<span class="keyword">master</span> <span class="title">rebase</span>化，可以和<span class="literal">master</span>快速合并了</span><br><span class="line"></span><br><span class="line">git checkout <span class="keyword">master</span></span><br><span class="line"><span class="title">gic</span> merge bugfix</span><br></pre></td></tr></table></figure></p>
<p><img src="http://backlogtool.com/git-guide/cn/img/post/stepup/capture_stepup1_4_8.png" alt="rebase"></p>
<p><img src="http://backlogtool.com/git-guide/cn/img/post/stepup/capture_stepup2_8_2.png" alt="rebase"></p>
<h2 id="u7248_u672C_u64CD_u4F5C"><a href="#u7248_u672C_u64CD_u4F5C" class="headerlink" title="版本操作"></a>版本操作</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status <span class="comment">//掌握工作区的状况,例如readme.txt被修改了。但不会具体告诉你什么修改了</span></span><br><span class="line">git diff readme<span class="class">.txt</span> <span class="comment">//想知道readme.txt具体修改了什么，需要这条命令</span></span><br></pre></td></tr></table></figure>
<p>HEAD代表当前的版本，前一个版本是HEAD^，HEAD^^</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="operator"><span class="keyword">reset</span> <span class="comment">--hard HEAD^ //退回到上个版本HEAD^</span></span></span><br></pre></td></tr></table></figure>
<p>当然只是移动了HEAD的位置，最新的版本并没有消失，可以返回，但需要他的版本号,版本号可通过reflog查询<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog <span class="comment">//可以查历史操作，从而获得版本号</span></span><br><span class="line">git reset --hard <span class="number">2123</span>ers<span class="comment">//输入版本号就可以穿越到未来，版本号不必输入完整</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff//是查看working tree与<span class="keyword">state</span> file的差别的。</span><br><span class="line">git diff --cached//是查看<span class="keyword">state</span> file与commit的差别的。</span><br><span class="line">git diff HEAD//是查看working tree和commit的差别的。（HEAD代表的是最近的一次commit的信息）</span><br></pre></td></tr></table></figure>
<h3 id="u64A4_u9500_u4FEE_u6539"><a href="#u64A4_u9500_u4FEE_u6539" class="headerlink" title="撤销修改"></a>撤销修改</h3><ol>
<li><p>修改了文件，但是没有添加到state</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- readme.txt  //其实是用<span class="keyword">state</span>里的文件替换工作文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改了文件 还添加到了state</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD readme.txt //用分支中的HEAD版本来替代<span class="keyword">state</span>的文件，工作区的没变。</span><br><span class="line">git checout -readme.txt //再用<span class="keyword">state</span>的文件替换工作区的</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果还commit了 只能返回上个版本了</p>
</li>
</ol>
<h3 id="u5220_u9664"><a href="#u5220_u9664" class="headerlink" title="删除"></a>删除</h3><p>与add同样一个概念，能改变state状态的只有add和rm命令。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm readme.txt //删除了工作区的文件，<span class="keyword">state</span>和master中的未变,可以通过checkout -- readme.txt恢复</span><br><span class="line">git rm readme.txt //删除了<span class="keyword">state</span>中的文件，可以通过reset HEAD readme.txt恢复。</span><br><span class="line">git commit -m <span class="string">"remove file"</span> //在master的HEAD中删除，要恢复只能返回HEAD^</span><br></pre></td></tr></table></figure></p>
<h2 id="u8FDC_u7A0B_u6570_u636E_u5E93"><a href="#u8FDC_u7A0B_u6570_u636E_u5E93" class="headerlink" title="远程数据库"></a>远程数据库</h2><h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><p>从远程数据库Pull历史记录,与本地数据库合并。<br>如果远程数据库含本地数据库的所有历史记录，可以直接fast-forward<br>如果本地数据库有更新又没Push到远程数据，需要先进行冲突修改，再合并。</p>
<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>执行fetch会取得远程数据库最新的历史记录，放在一个交FETCH_HEAD的分支中。</p>
<p><img src="http://backlogtool.com/git-guide/cn/img/post/stepup/capture_stepup3_2_1.png" alt="fetch的状态"></p>
<p>在这个状态下，若要把远程数据库的内容合并到本地数据库，可以合并FETCH_HEAD，或者重新执行pull。</p>
<p>pull其实就是fetch+merge。</p>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>把本地数据库push到远程数据库，快速合并Push的分支。</p>
<p>基本上，远程数据库共享的提交是不能修改的。如果修改的话，跟远程数据库同步的其他数据库的历史记录会变得很奇怪的</p>
<h2 id="u6807_u7B7E"><a href="#u6807_u7B7E" class="headerlink" title="标签"></a>标签</h2><p>不能移动，分为注释标签和轻标签。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">pang</span> //添加注释</span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-am</span> <span class="string">"kumashigeshabi"</span> kuma //添加一个kuma标签，其注释是kumashishabi</span><br></pre></td></tr></table></figure>
<h2 id="Android_Studio_u4E2D_u9047_u5230_u7684_u95EE_u9898"><a href="#Android_Studio_u4E2D_u9047_u5230_u7684_u95EE_u9898" class="headerlink" title="Android Studio中遇到的问题"></a>Android Studio中遇到的问题</h2><h3 id="u8BE5_u9879_u76EE_u5728github_u5DF2_u7ECF_u5B58_u5728"><a href="#u8BE5_u9879_u76EE_u5728github_u5DF2_u7ECF_u5B58_u5728" class="headerlink" title="该项目在github已经存在"></a>该项目在github已经存在</h3><ul>
<li><p>问题：<br>把github中的一个repository 删除后，想重新将project分享到github，但是Android Studio Project 依旧提示“ project is already on GitHub ”，即“该项目在github已经存在”。</p>
</li>
<li><p>解决办法：<br>关闭Android Studio，进入电脑中你要分享的那个项目的目录，假设我这里的项目目录是 C:\Users\HIPAA\AndroidStudioProjects\projectname\，<br>开启“显示隐藏文件”的功能，就能看到隐藏的文件夹/.git  ,打开其中的config文件，删除类似于下面格式的三行：</p>
</li>
</ul>
<blockquote>
<p>[remote “origin”]<br>url = <a href="https://github.com/ksharpdabu/projectname.git" target="_blank" rel="external">https://github.com/ksharpdabu/projectname.git</a><br>fetch = +refs/heads/<em>:refs/remotes/origin/</em></p>
</blockquote>
<p>然后保存config文件。重新打开Android Studio，点击“Share project on GitHub”，就不会有“ project is already on GitHub ”的错误提示了。</p>
<h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><p><a href="http://backlogtool.com/git-guide/cn/intro/intro1_2.html" target="_blank" rel="external">猴子都能懂的Git入门</a><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>所有版本管理软件只能追踪文本的具体修改，例如在第二行末尾加入来个“kuma”<br>而word,音乐，视频等二进制文件无法追踪具体修改,仅能告诉你文件大小从100KB变更为120KB。</p>
<h2 id="u521B_u5EFA_u4ED3_u5E93"><a href]]>
    </summary>
    
      <category term="Android" scheme="http://paracide.github.io/tags/Android/"/>
    
      <category term="Git" scheme="http://paracide.github.io/tags/Git/"/>
    
      <category term="GitHub" scheme="http://paracide.github.io/tags/GitHub/"/>
    
      <category term="Git" scheme="http://paracide.github.io/categories/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Github上配置Hexo 3.0]]></title>
    <link href="http://paracide.github.io/2015/12/23/github_hexo/"/>
    <id>http://paracide.github.io/2015/12/23/github_hexo/</id>
    <published>2015-12-23T03:11:11.000Z</published>
    <updated>2017-01-09T12:55:17.323Z</updated>
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。           ----- <a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo官方</a></p>
<h2 id="u5B89_u88C5Hexo"><a href="#u5B89_u88C5Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="u51C6_u5907"><a href="#u51C6_u5907" class="headerlink" title="准备"></a>准备</h3><ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> 推荐下载msi格式稳定版，新版已经会自动配置Path</li>
<li><a href="https://desktop.github.com/" target="_blank" rel="external">Github Desktop</a> Github官方出品 不需要再去配置SSH KEY ，但在线安装模式不开翻墙会有些麻烦</li>
</ul>
<h3 id="Git_Shell_u64CD_u4F5C"><a href="#Git_Shell_u64CD_u4F5C" class="headerlink" title="Git Shell操作"></a>Git Shell操作</h3><ul>
<li>打开桌面上的Git Shell,之后的操作都在这上面完成</li>
</ul>
<h3 id="u5B89_u88C5Hexo-1"><a href="#u5B89_u88C5Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在Git Shell输入以下代码</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-cli -<span class="keyword">g</span></span><br><span class="line">npm <span class="keyword">install</span> hexo <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<h3 id="u5EFA_u7AD9"><a href="#u5EFA_u7AD9" class="headerlink" title="建站"></a>建站</h3><ul>
<li>根据喜好创建一个文件夹（F:\GitHub\hexo）用于放置你的hexo<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="attribute">F</span>:<span class="string">\GitHub\hexo</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="built_in">npm</span> install</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="u5B89_u88C5Hexo_u63D2_u4EF6"><a href="#u5B89_u88C5Hexo_u63D2_u4EF6" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">archive</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">category</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-heroku <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-rsync <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-openshift <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-marked@<span class="number">0.2</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-stylus@<span class="number">0.2</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-feed@<span class="number">1</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap@<span class="number">1</span> <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<h3 id="u672C_u5730_u9884_u89C8"><a href="#u672C_u5730_u9884_u89C8" class="headerlink" title="本地预览"></a>本地预览</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">g</span></span><br><span class="line">hexo <span class="literal">s</span></span><br><span class="line"></span><br><span class="line">#复合命令</span><br><span class="line">hexo s -<span class="keyword">g</span></span><br></pre></td></tr></table></figure>
<p>完成会提示你在 0.0.0.0:4000查看，但会无法显示，去<a href="http://localhost:4000/" target="_blank" rel="external">localhost:4000/</a>查看</p>
<h2 id="u90E8_u7F72_u9759_u6001_u7F51_u9875_u5230GitHub"><a href="#u90E8_u7F72_u9759_u6001_u7F51_u9875_u5230GitHub" class="headerlink" title="部署静态网页到GitHub"></a>部署静态网页到GitHub</h2><h3 id="Github_u5EFA_u7ACB_u4ED3_u5E93"><a href="#Github_u5EFA_u7ACB_u4ED3_u5E93" class="headerlink" title="Github建立仓库"></a>Github建立仓库</h3><ul>
<li>创建一个<a href="https://github.com/" target="_blank" rel="external">Github</a>账号</li>
<li>创建仓库，<a href="https://github.com/new" target="_blank" rel="external">new repository</a>,Repository name的格式必须是你的<strong>username.github.io</strong>（我之前把username错打成paraicde一直没发现，导致卡部署卡了好几天）<br><img src="http://7xpcgs.com1.z0.glb.clouddn.com/1.png" alt="repository"></li>
</ul>
<h3 id="u90E8_u7F72deploy"><a href="#u90E8_u7F72deploy" class="headerlink" title="部署deploy"></a>部署deploy</h3><ul>
<li>打开hexo_config.yml,修改最后一段,把所有的paracide改成你的username<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/paracide/paracide.github.io.git</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="u4E0A_u4F20Github"><a href="#u4E0A_u4F20Github" class="headerlink" title="上传Github"></a>上传Github</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">g</span></span><br><span class="line">hexo <span class="literal">d</span></span><br><span class="line"></span><br><span class="line">#复合代码</span><br><span class="line">hexo <span class="keyword">d</span> -<span class="keyword">g</span></span><br></pre></td></tr></table></figure>
<p>第一次提交需要等到5分钟+，然后就可以看到你的静态博客了（例如paracide.github.io）</p>
<h1 id="u5982_u679C_u4F60_u914D_u7F6E_u51FA_u4E86_u95EE_u9898"><a href="#u5982_u679C_u4F60_u914D_u7F6E_u51FA_u4E86_u95EE_u9898" class="headerlink" title="如果你配置出了问题"></a>如果你配置出了问题</h1><p>很大原因是少了个 空格</p>
<h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://bblove.me/2015/06/16/hexo-3-0-update/" target="_blank" rel="external">安装和配置hexo 3.0</a></li>
<li><a href="http://bellaciela.com/blog/2015/advanced-hexo/" target="_blank" rel="external">Hexo进阶折腾</a></li>
<li><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li>
<li><a href="http://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="external">使用GitHub和Hexo搭建免费静态Blog</a></li>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NEXT官方文档</a></li>
<li><a href="https://www.v2ex.com/t/154707" target="_blank" rel="external">如何在 VPS 上面搭建 hexo 博客(小白教程)</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。           ----- <a href="https://hexo.io/zh-cn/" target="_blank]]>
    </summary>
    
      <category term="GitHub" scheme="http://paracide.github.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://paracide.github.io/tags/Hexo/"/>
    
      <category term="Hexo" scheme="http://paracide.github.io/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Demo2-HumaNews]]></title>
    <link href="http://paracide.github.io/2015/12/18/humanew/"/>
    <id>http://paracide.github.io/2015/12/18/humanew/</id>
    <published>2015-12-18T03:11:11.000Z</published>
    <updated>2017-02-03T15:08:50.758Z</updated>
    <content type="html"><![CDATA[<p>练习Demo2,来自《第一行代码》<br>主要解决各个fragment之间的交互,以及同一个APP在手机和平板下不同显示模式</p>
<h2 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="思路"></a>思路</h2><p>手机:</p>
<ul>
<li>MainActivity,放置NewsTitleFragment</li>
<li>ContentActivity,放置NewsContentFragment</li>
</ul>
<p>平板:</p>
<ul>
<li>MainActivity同时放置NewsTitleFragment和NewsContentFragment</li>
</ul>
<p>使用最小限定符来实现手机和平板使用不同的layout<br>在<strong>res/layout-sw600dpi/activity_main.xml</strong>进行控制,主要为layout_weight这个属性进行分配<br>其中layout_width=&quot;0dp&quot;,否则分配比例会出现出现问题</p>
<h2 id="News_u7C7B"><a href="#News_u7C7B" class="headerlink" title="News类"></a>News类</h2><h3 id="u6210_u5458_u53D8_u91CF"><a href="#u6210_u5458_u53D8_u91CF" class="headerlink" title="成员变量"></a>成员变量</h3><p><code>title,content</code></p>
<h2 id="NewsContentFragment_u7C7B"><a href="#NewsContentFragment_u7C7B" class="headerlink" title="NewsContentFragment类"></a>NewsContentFragment类</h2><h3 id="u6210_u5458_u53D8_u91CF-1"><a href="#u6210_u5458_u53D8_u91CF-1" class="headerlink" title="成员变量"></a>成员变量</h3><p><code>contentview</code></p>
<h3 id="onCreateView_28_29"><a href="#onCreateView_28_29" class="headerlink" title="onCreateView()"></a>onCreateView()</h3><p>通过布局文件xml的ID,利用LayoutInflater来获得相应的contentView</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflater.<span class="keyword">from</span>(getContext()).inflate(resourceID,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p>LayoutInflater直译一下就是&quot;布局填充者&quot;，确实&quot;人如其名&quot;,它做的事情就是用来加载布局的</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflaterlayoutInflater=LayoutInflater.from(<span class="keyword">context</span>);</span><br><span class="line">LayoutInflaterlayoutInflater=(LayoutInflater)<span class="keyword">context</span>.getSystemService(<span class="keyword">Context</span>.LAYOUT_INFLATER_SERVICE);</span><br></pre></td></tr></table></figure>
<p>第一种就是第二种的简单写法，只是Android给我们做了一下封装而已</p>
<h3 id="refresh_28String_title_2CString_context_29"><a href="#refresh_28String_title_2CString_context_29" class="headerlink" title="refresh(String title,String context)"></a>refresh(String title,String context)</h3><p>在成员变量view中通过findViewById来找到各种textView来设定,来刷新contentView中的内容</p>
<h2 id="NewsAdapter_extends_ArrayAdapter"><a href="#NewsAdapter_extends_ArrayAdapter" class="headerlink" title="NewsAdapter extends ArrayAdapter"></a>NewsAdapter extends ArrayAdapter</h2><h3 id="u6210_u5458_u53D8_u91CF-2"><a href="#u6210_u5458_u53D8_u91CF-2" class="headerlink" title="成员变量"></a>成员变量</h3><p><code>int resourceId</code></p>
<h3 id="public_NewsAdapter_28Context_context_2Cint_resourceId_2CList_list_29"><a href="#public_NewsAdapter_28Context_context_2Cint_resourceId_2CList_list_29" class="headerlink" title="public NewsAdapter(Context context,int resourceId,List list)"></a>public NewsAdapter(Context context,int resourceId,List<news> list)</news></h3><h3 id="public_view_getView_28int_postion_2CView_convertView_2CViewGroup_parent_29_3A"><a href="#public_view_getView_28int_postion_2CView_convertView_2CViewGroup_parent_29_3A" class="headerlink" title="public view getView(int postion,View convertView,ViewGroup parent):"></a>public view getView(int postion,View convertView,ViewGroup parent):</h3><p>虽然ViewGroup暂时用不到,但还是需要写上这个参数.<br>根据postion得到相应的News实例,获得各种view进行设置</p>
<h2 id="NewsContentActivity"><a href="#NewsContentActivity" class="headerlink" title="NewsContentActivity"></a>NewsContentActivity</h2><h3 id="actionStart_28_29"><a href="#actionStart_28_29" class="headerlink" title="actionStart()"></a>actionStart()</h3><p>让手机(平板不需要)来启动这个action<br>创建一个布局,在里面插入一个fragment也就是上面的NewsContentFragment<br>通过android:name来实现</p>
<h3 id="onCreate_28_29"><a href="#onCreate_28_29" class="headerlink" title="onCreate()"></a>onCreate()</h3><p>从intent中得到News的title content.<br>通过getFragManager.findFragByID来获得fragment的实例<br>调用refresh来完成news内容的显示</p>
<h2 id="NewsTitleFragment"><a href="#NewsTitleFragment" class="headerlink" title="NewsTitleFragment"></a>NewsTitleFragment</h2><h3 id="u6210_u5458_u53D8_u91CF-3"><a href="#u6210_u5458_u53D8_u91CF-3" class="headerlink" title="成员变量"></a>成员变量</h3><p><code>ListView,List&lt;News&gt;,NewsAdapter,Boolean isTwoPane</code></p>
<p>布局使用Listview,所以要用相应的newsAdapter通过newslist<news>来适配<br>通过检索是否有layout-large/main.xml中特有的xml来判定是手机还是平板<br>获得新闻实例,不过这里是手动输入,没有完成网络部分.</news></p>
<p>监听每个item,<br>如果是手机,则通过Intent来启动NewsContentActivity<br>如果是平板,则直接调用同一个activity里的NewsContentFragment的refresh方法,进行News内容的刷新<br>因为不存在NewscontentActivity,没有onCreate方法,需要自行刷新</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>练习Demo2,来自《第一行代码》<br>主要解决各个fragment之间的交互,以及同一个APP在手机和平板下不同显示模式</p>
<h2 id="u601D_u8DEF"><a href="#u601D_u8DEF" class="headerlink" title="]]>
    </summary>
    
      <category term="Android" scheme="http://paracide.github.io/tags/Android/"/>
    
      <category term="实战" scheme="http://paracide.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="Android" scheme="http://paracide.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Shadowsocks的搭建]]></title>
    <link href="http://paracide.github.io/2015/12/18/shaodwosocks/"/>
    <id>http://paracide.github.io/2015/12/18/shaodwosocks/</id>
    <published>2015-12-18T03:11:11.000Z</published>
    <updated>2016-12-06T07:08:16.103Z</updated>
    <content type="html"><![CDATA[<h1 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h1><h2 id="DigitalOcean"><a href="#DigitalOcean" class="headerlink" title="DigitalOcean"></a>DigitalOcean</h2><ul>
<li>Github的学生礼包赠送$100的赞助,可供使用20个月,现在是否还支持国内大学邮箱不确定，若干兑换码无法使用，在Support中Open a Support Ticket联系DO让他们帮助你。</li>
<li>DO首次充值 $5(最低)还会赠送$10。</li>
<li>电信平常速度仅300K/s左右(旧金山,新加坡机房),搭配上锐速,100M电信情况下最高达到过9M/s,Youtube1080P无压力,Twitch在换了SSR后已经无法流畅观看，原因未知。</li>
<li>使用几周后就会出现大规模的抽风,经测试是江苏电信宽带的问题</li>
</ul>
<h2 id="Bandwagon"><a href="#Bandwagon" class="headerlink" title="Bandwagon"></a>Bandwagon</h2><ul>
<li>大名鼎鼎的搬瓦工,支持支付宝,以前便宜的包年$3.99/,$4.99已经没货了,最便宜的已达到$20一年</li>
<li>江苏电信网络下表现仅有100~200K/s,学校移动宽带表现不错可达1M/s(满速).</li>
<li>支持一键搭建shadowsocks,很方便</li>
</ul>
<h2 id="u7535_u4FE1"><a href="#u7535_u4FE1" class="headerlink" title="电信"></a>电信</h2><ul>
<li>电信国际出口流量大规模丢包问题在<a href="https://www.zhihu.com/question/27781875" target="_blank" rel="external">知乎</a>上找到了相关解答,解决方案似乎只有换网络商或者走CN2路线中转。</li>
</ul>
<h1 id="Shadowsocks_u7684_u642D_u5EFA"><a href="#Shadowsocks_u7684_u642D_u5EFA" class="headerlink" title="Shadowsocks的搭建"></a>Shadowsocks的搭建</h1><p>DigitalOcean为例部署</p>
<h2 id="Droplet_u521B_u5EFA"><a href="#Droplet_u521B_u5EFA" class="headerlink" title="Droplet创建"></a>Droplet创建</h2><ul>
<li>在官网右上角点击CreateDroplet,选择最低的$5/mo,仅用于翻墙已经足够了</li>
<li>服务器<a href="http://speedtest-sfo1.digitalocean.com/" target="_blank" rel="external">测速</a>后进行选择<ul>
<li>Linux系统在<a href="http://my.serverspeeder.com/ls.do?m=availables" target="_blank" rel="external">锐速支持列表</a>选择一持,如果没有,在创建好Droplte也可以在之后更换内核</li>
<li>在邮箱查收IP地址,用户名,密码</li>
</ul>
</li>
</ul>
<h2 id="Putty"><a href="#Putty" class="headerlink" title="Putty"></a>Putty</h2><ul>
<li>后续操作都要通过Putty连接VPS完成</li>
<li>下载安装Putty后打开,输入邮件里的IP,连接方式SSH,端口22</li>
<li>输入用户,密码(输入密码时并不会显示任何字符包括*,输完回车即可),密码需要连续输入2次,复制后右击即可粘贴成功,之后在输入两次新的密码</li>
</ul>
<h2 id="u57FA_u672C_u5E93_u5B89_u88C5"><a href="#u57FA_u672C_u5E93_u5B89_u88C5" class="headerlink" title="基本库安装"></a>基本库安装</h2><ul>
<li><p>由于Shadowsocks原作者clowwindy被请喝茶,这里使用breakwa11的<a href="https://github.com/breakwa11/shadowsocks-rss" target="_blank" rel="external">shadowsocksR</a>,(目测breakwa11也暂时不维护了)</p>
</li>
<li><p>以下命令均以root用户执行(复制,右击复制回车即可)</p>
</li>
</ul>
<p>0centos：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> m2crypto git libsodium</span><br></pre></td></tr></table></figure></p>
<p> ubuntu/debian：<br>​<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> install m2crypto git</span><br></pre></td></tr></table></figure></p>
<h2 id="u83B7_u53D6_u6E90_u4EE3_u7801"><a href="#u83B7_u53D6_u6E90_u4EE3_u7801" class="headerlink" title="获取源代码"></a>获取源代码</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">-b</span> manyuser https://github.com/breakwa11/shadowsocks.git</span><br></pre></td></tr></table></figure>
<ul>
<li><p>执行完毕后此目录会新建一个shadowsocks目录，其中根目录的是多用户版（即数据库版，个人用户请忽略这个），子目录中的是单用户版(即shadowsocks/shadowsocks)。</p>
<p>  根目录即 ./shadowsocks<br>  子目录即 ./shadowsocks/shadowsocks</p>
</li>
</ul>
<h2 id="u670D_u52A1_u7AEF_u914D_u7F6E"><a href="#u670D_u52A1_u7AEF_u914D_u7F6E" class="headerlink" title="服务端配置"></a>服务端配置</h2><h3 id="u8FDB_u5165_u5B50_u76EE_u5F55_uFF1A"><a href="#u8FDB_u5165_u5B50_u76EE_u5F55_uFF1A" class="headerlink" title="进入子目录："></a>进入子目录：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> shadowsocks/shadowsocks</span><br></pre></td></tr></table></figure>
<h3 id="Vim_u7F16_u8F91_u5668"><a href="#Vim_u7F16_u8F91_u5668" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h3><ul>
<li>Vim编辑器没接触过的人肯定不会用</li>
<li>这里简单以编写配置文件来说明下搭建shadowsocks时用到的命令</li>
</ul>
<ol>
<li><p>建立配置文件 ,会看到简单的json文件内容</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>shadowsocks.json</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入i 回车,进入插入模式</p>
</li>
<li><p>写入以下内容,完成后输入 :wq 即可保存退出</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">server</span>":<span class="value"><span class="string">"0.0.0.0"</span></span>,</span><br><span class="line">    "<span class="attribute">server_ipv6</span>":<span class="value"><span class="string">"::"</span></span>,</span><br><span class="line">    "<span class="attribute">server_port</span>":<span class="value"><span class="number">8388</span></span>,</span><br><span class="line">    "<span class="attribute">local_address</span>":<span class="value"><span class="string">"127.0.0.1"</span></span>,</span><br><span class="line">    "<span class="attribute">local_port</span>":<span class="value"><span class="number">1080</span></span>,</span><br><span class="line">    "<span class="attribute">password</span>":<span class="value"><span class="string">"mypassword"</span></span>,</span><br><span class="line">    "<span class="attribute">timeout</span>":<span class="value"><span class="number">300</span></span>,</span><br><span class="line">    "<span class="attribute">method</span>":<span class="value"><span class="string">"aes-256-cfb"</span></span>,</span><br><span class="line">    "<span class="attribute">obfs</span>":<span class="value"><span class="string">"http_simple"</span></span>,</span><br><span class="line">    "<span class="attribute">fast_open</span>":<span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">workers</span>":<span class="value"><span class="number">1</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>一般情况下，只需要修改以下五项即可：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"server_port"</span>:<span class="number">8388</span>,        <span class="comment">//端口</span></span><br><span class="line"><span class="string">"password"</span>:<span class="string">"password"</span>,     <span class="comment">//密码</span></span><br><span class="line"><span class="string">"protocol"</span>:<span class="string">"origin"</span>,       <span class="comment">//协议插件</span></span><br><span class="line"><span class="string">"obfs"</span>:<span class="string">"http_simple"</span>,      <span class="comment">//混淆插件</span></span><br><span class="line"><span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,    <span class="comment">//加密方式</span></span><br></pre></td></tr></table></figure></p>
<h3 id="u8FD0_u884C_u670D_u52A1"><a href="#u8FD0_u884C_u670D_u52A1" class="headerlink" title="运行服务"></a>运行服务</h3><p>运行子目录内的server.py：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python server<span class="class">.py</span> -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p>
<p>如果要在后台运行：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python server<span class="class">.py</span> -c /etc/shadowsocks<span class="class">.json</span> -d start</span><br></pre></td></tr></table></figure></p>
<p>如果要停止/重启：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python server<span class="class">.py</span> -c /etc/shadowsocks<span class="class">.json</span> -d restart</span><br></pre></td></tr></table></figure></p>
<p>查看日志：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail <span class="attribute">-f</span> /<span class="built_in">var</span>/<span class="keyword">log</span>/shadowsocks<span class="built_in">.</span><span class="keyword">log</span></span><br></pre></td></tr></table></figure></p>
<h2 id="u66F4_u65B0_u6E90_u4EE3_u7801"><a href="#u66F4_u65B0_u6E90_u4EE3_u7801" class="headerlink" title="更新源代码"></a>更新源代码</h2><p>如果代码有更新可用本命令更新代码<br>进入shadowsocks目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> shadowsocks</span><br></pre></td></tr></table></figure></p>
<p>执行<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> pull</span><br></pre></td></tr></table></figure></p>
<p>成功后重启ss服务</p>
<h2 id="IPv6_u89E3_u51B3google_u5B66_u672F_u88AB_u5899_2Cgoogle_u641C_u7D22_u9A8C_u8BC1_u7801"><a href="#IPv6_u89E3_u51B3google_u5B66_u672F_u88AB_u5899_2Cgoogle_u641C_u7D22_u9A8C_u8BC1_u7801" class="headerlink" title="IPv6解决google学术被墙,google搜索验证码"></a>IPv6解决google学术被墙,google搜索验证码</h2><ul>
<li>DigtalOcean的部分IP会被Google学术屏蔽,修改hosts强制使用IPv6访问</li>
<li><del>最近Google搜索也经常验证码,还是得通过改hosts解决</del></li>
<li>IPv6解决验证码不起作用,几天后还是出现了验证码,在Google+上看到别人讨论,似乎google封了DO部分服务器,唉,换IP吧</li>
</ul>
<p><strong>创建vps时勾选IPv6</strong></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>hosts</span><br></pre></td></tr></table></figure>
<p>文本末端加入<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4005</span><span class="pseudo">:801</span><span class="pseudo">::200e</span> <span class="tag">google</span><span class="class">.com</span></span><br><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4005</span><span class="pseudo">:801</span><span class="pseudo">::200e</span> <span class="tag">www</span><span class="class">.google</span><span class="class">.com</span></span><br><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4007</span><span class="pseudo">:805</span><span class="pseudo">::100fscholar</span><span class="class">.google</span><span class="class">.cn</span></span><br><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4007</span><span class="pseudo">:805</span><span class="pseudo">::100fscholar</span><span class="class">.google</span><span class="class">.com</span></span><br><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4007</span><span class="pseudo">:805</span><span class="pseudo">::100fscholar</span><span class="class">.google</span><span class="class">.com</span><span class="class">.hk</span></span><br><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4007</span><span class="pseudo">:805</span><span class="pseudo">::100fscholar</span><span class="class">.l</span><span class="class">.google</span><span class="class">.com</span></span><br></pre></td></tr></table></figure></p>
<h2 id="u66F4_u6539_u65F6_u533A"><a href="#u66F4_u6539_u65F6_u533A" class="headerlink" title="更改时区"></a>更改时区</h2><p>SSR的部分插件需要本地时间和VPS时间相差不超过X分钟<br>需要更改VPS的时区</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="regexp">/etc/</span>localtime</span><br><span class="line">ln -s <span class="regexp">/usr/</span>share<span class="regexp">/zoneinfo/</span>Asia<span class="regexp">/Shanghai /</span>etc<span class="regexp">/localtime</span></span><br></pre></td></tr></table></figure>
<h2 id="u963B_u6B62_u767E_u6BD2IP_u5B9A_u4F4D"><a href="#u963B_u6B62_u767E_u6BD2IP_u5B9A_u4F4D" class="headerlink" title="阻止百毒IP定位"></a>阻止百毒IP定位</h2><p>逛V2EX时候发现了这么一个问题,查了下SS的IP果然被定位了,虽然是我朋友家- -</p>
<p>SSR作者提供了这么一个解决方案</p>
<blockquote>
<p>在代理服务器及本地的HOST都添加如下</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span> <span class="tag">api</span><span class="class">.map</span><span class="class">.baidu</span><span class="class">.com</span></span><br><span class="line">1<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span> <span class="tag">ps</span><span class="class">.map</span><span class="class">.baidu</span><span class="class">.com</span></span><br><span class="line">1<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span> <span class="tag">sv</span><span class="class">.map</span><span class="class">.baidu</span><span class="class">.com</span></span><br><span class="line">1<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span> <span class="tag">offnavi</span><span class="class">.map</span><span class="class">.baidu</span><span class="class">.com</span></span><br><span class="line">1<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span> <span class="tag">newvector</span><span class="class">.map</span><span class="class">.baidu</span><span class="class">.com</span></span><br><span class="line">1<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span> <span class="tag">ulog</span><span class="class">.imap</span><span class="class">.baidu</span><span class="class">.com</span></span><br><span class="line">1<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span> <span class="tag">newloc</span><span class="class">.map</span><span class="class">.n</span><span class="class">.shifen</span><span class="class">.com</span></span><br><span class="line"></span><br><span class="line"><span class="pseudo">::2</span> <span class="tag">api</span><span class="class">.map</span><span class="class">.baidu</span><span class="class">.com</span></span><br><span class="line"><span class="pseudo">::2</span> <span class="tag">ps</span><span class="class">.map</span><span class="class">.baidu</span><span class="class">.com</span></span><br><span class="line"><span class="pseudo">::2</span> <span class="tag">sv</span><span class="class">.map</span><span class="class">.baidu</span><span class="class">.com</span></span><br><span class="line"><span class="pseudo">::2</span> <span class="tag">offnavi</span><span class="class">.map</span><span class="class">.baidu</span><span class="class">.com</span></span><br><span class="line"><span class="pseudo">::2</span> <span class="tag">newvector</span><span class="class">.map</span><span class="class">.baidu</span><span class="class">.com</span></span><br><span class="line"><span class="pseudo">::2</span> <span class="tag">ulog</span><span class="class">.imap</span><span class="class">.baidu</span><span class="class">.com</span></span><br><span class="line"><span class="pseudo">::2</span> <span class="tag">newloc</span><span class="class">.map</span><span class="class">.n</span><span class="class">.shifen</span><span class="class">.com</span></span><br><span class="line">以上写法会让连接超时等待，如果你希望连接立即拒绝断开，那么把"1<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span>"改为"0<span class="class">.0</span><span class="class">.0</span><span class="class">.0</span>"，把"<span class="pseudo">::2"</span>改为"<span class="pseudo">::"</span>即可</span><br></pre></td></tr></table></figure>
<h1 id="u9510_u901F_u4F18_u5316"><a href="#u9510_u901F_u4F18_u5316" class="headerlink" title="锐速优化"></a>锐速优化</h1><h2 id="u51C6_u5907"><a href="#u51C6_u5907" class="headerlink" title="准备"></a>准备</h2><ul>
<li>使用时，首先需要在<a href="http://www.serverspeeder.com/" target="_blank" rel="external">锐速</a>官网注册账户，然后确定自己的内核是否在<a href="http://my.serverspeeder.com/ls.do?m=availables" target="_blank" rel="external">锐速的支持列</a>表里，如果不在，请先更换内核</li>
<li>更换内核在进入你创建的Droplet→Setting→Kerenl,进行更换,记得重启</li>
<li><strong>现在锐速已经不再提供免费版本.不过目前有人破解了,我还没试过</strong></li>
</ul>
<h2 id="u5FEB_u901F_u5B89_u88C5"><a href="#u5FEB_u901F_u5B89_u88C5" class="headerlink" title="快速安装"></a>快速安装</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//my.serverspeeder.com/d/ls/serverSpeederInstaller.tar.gz</span></span><br><span class="line"></span><br><span class="line">tar xzvf serverSpeederInstaller<span class="class">.tar</span><span class="class">.gz</span></span><br><span class="line"></span><br><span class="line">bash serverSpeederInstaller.sh</span><br></pre></td></tr></table></figure>
<p>输入在官网注册的账号密码进行安装，默认设置直接回车即可，然后输入<br>y开机自动启动锐速，y立刻启动锐速。<br>再进行优化设置<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/serverspeeder/</span>etc<span class="regexp">/config</span></span><br></pre></td></tr></table></figure></p>
<p><code>rsc=&quot;1&quot;，RSC网卡驱动模式
advinacc=&quot;1&quot;  流量方向加速
maxmode=&quot;1&quot;  最大传输模式</code></p>
<p>退出保存</p>
<p>重新启动锐速的服务</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/serverspeeder/bin/serverSpeeder<span class="class">.sh</span> stop</span><br><span class="line">/serverspeeder/bin/serverSpeeder<span class="class">.sh</span> start</span><br></pre></td></tr></table></figure>
<h1 id="u5BA2_u6237_u7AEF"><a href="#u5BA2_u6237_u7AEF" class="headerlink" title="客户端"></a>客户端</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ol>
<li><a href="https://github.com/breakwa11/shadowsocks-csharp/releases" target="_blank" rel="external">Github下载</a></li>
<li>按照之前在配置文件里面填写的填入你的IP,密码等等</li>
<li>启动系统代理</li>
<li>先启动全局模式更新PAC,在切换到PAC模式</li>
</ol>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><ul>
<li>google play搜过 影梭</li>
<li><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="external">Github下载</a></li>
<li>配置同windows版</li>
</ul>
<h1 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.zhihu.com/question/27781875" target="_blank" rel="external">中国电信国际出口是否存在网速问题</a></li>
<li><a href="https://github.com/breakwa11/shadowsocks-rss/wiki/Server-Setup" target="_blank" rel="external">ShadowsocksR 服务端安装教程</a></li>
<li><a href="http://bblove.me/2015/06/16/digitalocean-support-google-scholar-by-ipv6/" target="_blank" rel="external">digitalocean配置ipv6</a></li>
<li><a href="http://my.serverspeeder.com/ls.do?m=availables" target="_blank" rel="external">ServerSpeeder 支持当前主流 Linux 系统的官方发行版本</a></li>
<li><a href="https://breakwa11.blogspot.com/2016/12/baidu.html" target="_blank" rel="external">如何以最暴力的方式防止百度定位泄露真实位置</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h1><h2 id="DigitalOcean"><a href="#DigitalOcean" class="headerlink" titl]]>
    </summary>
    
      <category term="DigtialOcean" scheme="http://paracide.github.io/tags/DigtialOcean/"/>
    
      <category term="Google" scheme="http://paracide.github.io/tags/Google/"/>
    
      <category term="IPv6" scheme="http://paracide.github.io/tags/IPv6/"/>
    
      <category term="Shadowsocks" scheme="http://paracide.github.io/tags/Shadowsocks/"/>
    
      <category term="VPS" scheme="http://paracide.github.io/tags/VPS/"/>
    
      <category term="锐速" scheme="http://paracide.github.io/tags/%E9%94%90%E9%80%9F/"/>
    
      <category term="科学上网" scheme="http://paracide.github.io/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <link href="http://paracide.github.io/2015/12/17/hello-hexo/"/>
    <id>http://paracide.github.io/2015/12/17/hello-hexo/</id>
    <published>2015-12-17T03:11:11.000Z</published>
    <updated>2016-11-13T06:03:41.770Z</updated>
    <content type="html"><![CDATA[<p>那时想搭建一个主页只是觉得：$5/m的VPS只用来搭建SS太浪费了。<br>在研究SS搭建过程了解到很多人将自己的个人主页放在了VPS上，他们都提到了WordPress。<br>查了很多资料，忙活一天总算搭建成功，并发布一篇 Hello World。<br>虽然过不了多久死于插件升级无法恢复，又重新搭了一次。<br>但WordPress确实非常非常的强大。</p>
<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>偶然在知乎上看到：</p>
<blockquote>
<p>Markdown语法 是程序员必备技巧</p>
</blockquote>
<p>用过之后简直cooooooooooooooool。<br>过去wordpress上简陋的写了那么几篇后，也算是明白为何大牛的文章排版是那么的高大上。</p>
<p>将本地文章存档改成Markdown语法后，迫不及待的想在WordPress实现。<br>尝试了几个插件，发现这有点难：</p>
<ol>
<li>JecPack作为官方的插件，却因为GFW的问题无法连接，我SS试了DO和BWG2个机房也无济于事，原因不明。</li>
<li>JP Markdown是将JecPack中的Markdown组件单独拿出来，但并没有什么效果，可能是我语法不规范造成的原因，不过现在也无法去验证。</li>
<li>WP-Markdown和PrettyPress 加上代码高亮插件后，已经很好的实现Markdown。但并没有让我感到非常的满意，同时我也没继续深入设置这些插件了。</li>
</ol>
<h3 id="u771F_u6B63_u539F_u56E0"><a href="#u771F_u6B63_u539F_u56E0" class="headerlink" title="真正原因"></a>真正原因</h3><p>整个折腾过程中，电信的国际出口流量已经差让我抓狂。<br>无论是用DO还是BWG机房的SS，在wordpress后台上的每一步操作都慢的让人崩溃，还时不时的丢包未响应。<br>我也是实在是不想每几周就换一次DO机房的IP了（学生狗也没钱去买阿里云中转）</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>查Markdown资料的过程中，对部分资料中提到的寄托在Github上的静态博客程序Hexo感兴趣。</p>
<blockquote>
<p>全静态化，响应速度快，轻量级等优点，是wp没法比的 ----<a href="https://www.v2ex.com/t/154707" target="_blank" rel="external">echopan</a></p>
</blockquote>
<p>折腾好几天才完成Hexo的搭建，最大的问题却源于一个小小错误，具体内容会在之后的《Github上搭建Hexo》具体说明。</p>
<p>酷炫的界面，畅快的响应速度，Markdown的强大支撑，建成后的Hexo令我非常非常满足。<br>同时也深刻体验到git的便捷之处。</p>
<h2 id="To_The_New_World"><a href="#To_The_New_World" class="headerlink" title="To The New World"></a>To The New World</h2><p>已经陆陆续续的将以前写的部分日志搬了回来，在Markdown语法下重新梳理似乎更加有了些秩序。<br>后面的一段时间内，本Blog也应该不会有什么大的改动了。</p>
<p>作为一个刚刚接触IT不到一年的生物狗<br>可能还有着不少问题，我会在不断的学习中完善他们。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>那时想搭建一个主页只是觉得：$5/m的VPS只用来搭建SS太浪费了。<br>在研究SS搭建过程了解到很多人将自己的个人主页放在了VPS上，他们都提到了WordPress。<br>查了很多资料，忙活一天总算搭建成功，并发布一篇 Hello World。<br>虽然过不了多久死]]>
    </summary>
    
      <category term="GitHub" scheme="http://paracide.github.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://paracide.github.io/tags/Hexo/"/>
    
      <category term="Markdown" scheme="http://paracide.github.io/tags/Markdown/"/>
    
      <category term="CLANNAD" scheme="http://paracide.github.io/categories/CLANNAD/"/>
    
  </entry>
  
</feed>
